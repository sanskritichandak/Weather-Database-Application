{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**NoSQL Weather Database using MongoDB**"
      ],
      "metadata": {
        "id": "X8INwJJU6sd0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MiniWorld Description: Weather Database** \n",
        "\n",
        "Consider a weather database in which information about\n",
        "\n",
        "*   The weather event types are identified by a unique event number, description of the type of weather event, and its severity\n",
        "*   The fs.files are identified by their filename(consists of images relevent to each type of weather event), and respective weatherID\n",
        "*   The locations are identified by a unique location number, the name of the city, county, state, and zipcode\n",
        "*   The airport-based weather stations record the weather reports which are identified by their unique airport number, aiport code, time zone the weather station is located in, and the location it reports weather for\n",
        "*  The daily weather reports are created when the airport-based weather stations record the weather report which is identified by a unique report number, date of the report, weatherID, type of weather, serverity of the weather, location number, airport number, and the precipiation that was recorded\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "H5AquSpBbMOl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Description of entities and attributes** \n",
        "\n",
        "The baseline conceptual model should contain the following <entity;attributes>;\n",
        "\n",
        "1. <WeatherEvents; WeatherID (PK), Weather_Type, Severity>\n",
        "2. <WeatherLocations; Location ID (PK), City, County, State, ZipCode>\n",
        "3. <Airports; AirportID (PK), AirportCode, TimeZone, LocationID (FK)>\n",
        "4. <DailyWeather; DailyWeatherID (PK), Date, WeatherID (FK), WeatherType (FK), Severity (FK), LocationID (FK), AirportID (FK), Precipitation>\n",
        "5. <fs.files; filename (PK), WeatherID (FK)>"
      ],
      "metadata": {
        "id": "Ap-4D2pRbfPK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Description and correct mapping of all relationships**\n",
        "\n",
        "The minimum conceptual model should have the following relationships and cardinalities\n",
        "\n",
        "1. Each weather location has one and only one (1, 1) airport-based weather station \n",
        "2. Each airport-based weather station has one and only one (1, 1) weather location\n",
        "3. Each daily weather report can have one and only one (1, 1) weather ID\n",
        "4. Each weather ID can have zero or many (0, N) daily weather reports \n",
        "5. Each daily weather report can have one and only one (1, 1) weather type \n",
        "6. Each weather type can have zero or many (0, N) daily weather reports\n",
        "7. Each daily weather report can have one and only one (1, 1) severity level \n",
        "8. Each severity level can have zero or many (0, N) daily weather reports \n",
        "9. Each daily weather report can have one and only one (1, 1) airport ID\n",
        "10. Each airport ID can have zero or many (0, N) daily weather reports \n",
        "11. Each file can one only and only one (1, 1) weather ID \n",
        "12. Each weather ID can have one and only one (1, 1) file"
      ],
      "metadata": {
        "id": "a1NxuSszcjMl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Description and correct mapping of constraints related to business rules**\n",
        "\n",
        "The state of the weather database corresponds to the statuses of all its relations in a particular point in time \n",
        "\n",
        "The constraints are derived from the rules in the miniworld that the database represents \n",
        "\n",
        "Examples of constraints related to business rules \n",
        "\n",
        "1. The weather database is a NoSQL document-based databse: data is stored in the form of documents, described in JSON and accessed by their document ID or other indexes \n",
        "\n",
        "2. The CAP theorum is applicable to the Weather database. The CAP theory consists of three desirable properties of distributed systems with replicated data of which two are application to NoSQL databases:\n",
        "\n",
        "*   availability of the system to read and write operations: the documents from this databse can be used to create views, triggers, and indexes and run general queries, filter for documents, aggregate data from documents, update and delete data from documents \n",
        "*   partition tolerance: the data can be partitioned and used in accordance with the constraints of the database\n",
        "\n",
        "3. The document stores resemble complex or XML documents and are self-describing. The documents have different data elements (attributes) even if they belong to the same colelction. New documents can have data elements that do not exist in any current document in the collection. \n",
        "\n",
        "4. MongoDB documents are stored in BSON (binary JSON) format, which is a variation of JSON with additional data types and is more efficient for storage than JSON\n",
        "\n",
        "5. All write operations are replicated on the primary copy and all read operations are replicated by any copy\n"
      ],
      "metadata": {
        "id": "E-EqJrGFc5Da"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Choice of database application and library**\n",
        "\n",
        "MongoDB is a document database used to build highly available and scalable internet applications. MongoDB accomodates large amounts of data and is an open source NoSQL database. MongoDB is compatible with the large amounts of data that the Weather dataset has. Furthermore, it is able to process structured, semi-structured, and unstructured data from the Weather data set as it uses a non-relational document-oriented data model and a non-structured query language. It allows the user to combine and store multiple types of data which is applicable to the Weather data set since it consists of various types of data such as strings, integers, dates, etc. Furthermore, MongoDB allows the user to connect their application through a driver or Atlas Data API in any programming language including Python. It allows you to access the data through MongoDB's GUI or Javascript interface and is compatible with various operating softwares.\n",
        "\n",
        "Google Collab allows the user to write and execute arbitray python code through the browser. In addition, Google is cloud-based which allows it to be connected to MongoDB.\n",
        "\n",
        "PyMongo is a Python distribution containing tool for working with MongoDB. It is the official MongoDB driver for synchronous Python applications. It servers as the connector between Google Colab and MongoDB. Using the PyMongo library allows you to connect to MongoDB Atlas and develop open source NoSQL databases and carry out non-structured queries in Python.\n",
        "\n",
        "There are many benefits to utilizing a NoSQL database than a relational database such as flexible data models, horizontal scaling, faster queries and its easy to use for developers.  NoSQL databases usually have flexible schemas which allow you to easily make changes to your database as requirements are changed and updated.  Furthermore, horizontal scaling is a major advantage of NoSQL databases because most of them allow you to scale out horizontally which means you can add cheaper commodity servers when needed.  Moreover, NoSQL databases query faster than SQL databases because data in NoSQL databases is stored in a way that is optimized for queries.  Lastly, NoSQL databases are advantageous because they map their data structures to those of popular programming languages like MongoDB has.  Thus, developers can store and code their data in the ways they are used to and it makes it easier for more programmers to use. Given these advantages of NoSQL and MongoDB, we have chosen to use it to create our database application for the weather database as it proves to be the most efficient and effective way to store and query data. Thus, the Weather database is created by connecting the Atlas Data API using Pymongo."
      ],
      "metadata": {
        "id": "XBnJeNuidMBH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#install pymongo\n",
        "!pip install \"pymongo[srv]\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Z4IbNUh0TQb",
        "outputId": "f4cb4d25-adab-4321-9b5f-34229fa50627"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pymongo[srv] in /usr/local/lib/python3.8/dist-packages (4.3.3)\n",
            "Requirement already satisfied: dnspython<3.0.0,>=1.16.0 in /usr/local/lib/python3.8/dist-packages (from pymongo[srv]) (2.2.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Establishing database connection"
      ],
      "metadata": {
        "id": "EnCue869dfRk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oFQxqXA2y9m8"
      },
      "outputs": [],
      "source": [
        "#connecting to database using pymongo\n",
        "#import pymongo\n",
        "import pymongo "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing gridfs to insert pictures/files into our database\n",
        "import gridfs"
      ],
      "metadata": {
        "id": "kEOCWlYdwAJ0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#import the library datetime\n",
        "#allows you to record dates and times in the documents\n",
        "from datetime import datetime"
      ],
      "metadata": {
        "id": "b1L6HCKaFyBL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#import pprint to print data structures in a readable manner\n",
        "import pprint "
      ],
      "metadata": {
        "id": "23nxekF0xwfd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#connecting to shared database created on Cloud.MongoDB\n",
        "#retrieve the IP address of this Colab notebook\n",
        "\n",
        "!curl ipecho.net/plain \n",
        "\n",
        "#copy output of IP address\n",
        "#click on Network Access on the left hand menu\n",
        "#click add IP address\n",
        "#paste IP address as Access Entry List and click Confirm "
      ],
      "metadata": {
        "id": "G-7XAzRm0XTF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b14841c-ad1f-4b6e-a305-24a2db21f432"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35.192.187.127"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a connection to the Weather database and cluster\n",
        "#select Connect and choose MongoDB drivers\n",
        "#select the driver as Python and the version as 3.6 or later \n",
        "#copy the connection string \n",
        "#remove \"<password>\" and replace it with the user's password which is st207group22\n",
        "#check the Network Access tab and add your IP address everytime you change your network connection \n",
        "#Important parameters for the connection string: username, password, cluster name, and database name \n",
        "#if the below code throws an error repeat the above steps and paste the new connection string \n",
        "\n",
        "myclient = pymongo.MongoClient(\"mongodb+srv://sanskritichandak:st207group22@weather.eawzt8h.mongodb.net/?retryWrites=true&w=majority\")\n",
        "myclient"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cu3Aqtfe0q_M",
        "outputId": "851aa6ff-6865-41b7-af15-d93e0473b59e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MongoClient(host=['ac-k0ttznx-shard-00-01.eawzt8h.mongodb.net:27017', 'ac-k0ttznx-shard-00-00.eawzt8h.mongodb.net:27017', 'ac-k0ttznx-shard-00-02.eawzt8h.mongodb.net:27017'], document_class=dict, tz_aware=False, connect=True, retrywrites=True, w='majority', authsource='admin', replicaset='atlas-b4peac-shard-0', tls=True)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#retrieve the list of existing databases from your cluster\n",
        "#even if we use a specific database for connecting to the server, you can still retrieve all the databases and change to other databases\n",
        "#if the below code returns an error: try retpying the code and running the cell again \n",
        "#alternatively check if the notebooks' IP address has been added to the Network Access on MongoDB \n",
        "\n",
        "print(myclient.list_database_names())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dHmaCfRV1Xnh",
        "outputId": "e1e581ce-c106-4772-e52d-a0bb401a76b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['admin', 'local']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Collection and document creation, including relational constraints (PK, FK, NOT NULL)**\n",
        "\n",
        "The data for the Weather database was sourced from \n",
        "\n",
        "https://www.kaggle.com/datasets/sobhanmoosavi/us-weather-events/versions/3?resource=download\n",
        "\n",
        "Description of the dataset: This is a countrywide weather events dataset that includes 7.5 million events, and covers 49 states of the United States. Examples of weather events are rain, snow, storm, and freezing condition. The data is collected from January 2016 to December 2021, using historical weather reports that were collected from 2,071 airport-based weather stations across the nation.\n",
        "\n",
        "Description of Weather Events\n",
        "\n",
        "Weather event is a spatiotemporal entity, where such an entity is associated with location and time. Following is the description of available weather event types in this dataset:\n",
        "\n",
        "Severe-Cold: The case of having extremely low temperature, with temperature below -23.7 degrees of Celsius.\n",
        "Fog: The case where there is low visibility condition as a result of fog or haze.\n",
        "Hail: The case of having solid precipitation including ice pellets and hail.\n",
        "Rain: The case of having rain, ranging from light to heavy.\n",
        "Snow: The case of having snow, ranging from light to heavy.\n",
        "Storm: The extremely windy condition, where the wind speed is at least 60 km/h.\n",
        "Other Precipitation: Any other type of precipitation which cannot be assigned to previously described event types.\n",
        "\n",
        "Since the dataset contains 7.5 million datapoints, it was filtered in Excel based on WeatherType, City, and State for the purpose of simulating a database application using MongoDB. \n",
        "\n",
        "The filtered data was saved as a new Excel workbook for each collection. Each Excel file for each collection is saved as a CSV file with the collection name. \n",
        "\n",
        "Following which, in Google Colab using pymongo the data insert commands are used to insert the data into the database on Cloud.MongoDB.\n",
        "Since the documents is being created in the manner described above, the constraints related to business rules are not directly displayed in the Database Structure Schema. However, for each collection schema assume the following constraints:\n",
        "\n",
        "1. WeatherEvents \n",
        "\n",
        "WeatherID: PK, NOT NULL \n",
        "\n",
        "WeatherType: NOT NULL\n",
        "\n",
        "Severity: NOT NULL \n",
        "\n",
        "2. fs.files \n",
        "\n",
        "filename: PK, NOT NULL \n",
        "\n",
        "WeatherID: FK, NOT NULL\n",
        "\n",
        "3. WeatherLocations\n",
        "\n",
        "LocationID: PK, NOT NULL \n",
        "\n",
        "City: NOT NULL \n",
        "\n",
        "County: NOT NULL \n",
        "\n",
        "State: NOT NULL \n",
        "\n",
        "ZipCode: NOT NULL \n",
        "\n",
        "4. Airports \n",
        "\n",
        "AirportID: PK, NOT NULL \n",
        "\n",
        "AirportCode: NOT NULL \n",
        "\n",
        "TimeZone: NOT NULL \n",
        "\n",
        "LocationID: FK, NOT NULL\n",
        "\n",
        "5. DailyWeather\n",
        "\n",
        "DailyWeatherID: PK, NOT NULL \n",
        "\n",
        "Date: NOT NULL \n",
        "\n",
        "WeatherID: FK, NOT NULL \n",
        "\n",
        "WeatherType: FK, NOT NULL \n",
        "\n",
        "Severity: FK, NOT NULL \n",
        "\n",
        "LocationID: FK, NOT NULL \n",
        "\n",
        "AirportID: FK, NOT NULL \n",
        "\n",
        "Precipitaion: NOT NULL\n"
      ],
      "metadata": {
        "id": "ll0rizY8kMGx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#create or open existing database \n",
        "#database name: Weather\n",
        "mydb = myclient[\"Weather\"]"
      ],
      "metadata": {
        "id": "Y6ammMQOHBxj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#create collection named WeatherEvents\n",
        "mycol1 = mydb[\"WeatherEvents\"]"
      ],
      "metadata": {
        "id": "agNO0WdlHZqO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a new document for WeatherEvents\n",
        "newDoc1 = {\"WeatherID\" : 1,\n",
        "          \"WeatherType\" : \"Cold\",\n",
        "          \"Severity\" : \"Severe\"}"
      ],
      "metadata": {
        "id": "7xoXmOpqKXei"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#inserting the document into WeatherEventts\n",
        "x = mycol1.insert_one(newDoc1)\n",
        "#checking the object ID for the new document in WeatherEvents\n",
        "print(\"Object ID for the new document: \", x.inserted_id)"
      ],
      "metadata": {
        "id": "djGVZTJLH0xW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cfe3893e-cdc7-44d4-8a0c-157d0ecb70d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Object ID for the new document:  63c2caf86dcd39962050e38f\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#retrieving the first document from the collection WeatherEvents\n",
        "type1 = mycol1.find_one()\n",
        "print(\"Document:\", type1)"
      ],
      "metadata": {
        "id": "HFmSlGXRIQpQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7261e6fd-927b-46c2-e3fd-2ac3f0881c31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Document: {'_id': ObjectId('63c2caf86dcd39962050e38f'), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#bulk insert documents into WeatherEvents\n",
        "#insert a given number of documents, and each document can have a slightly different structure\n",
        "\n",
        "newDocs1 = [ {\"WeatherID\" : 2,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Moderate\"},\n",
        "            \n",
        "           {\"WeatherID\" : 3,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Severe\"},\n",
        "            \n",
        "           {\"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\"},\n",
        "            \n",
        "           {\"WeatherID\" : 5,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Moderate\"},\n",
        "            \n",
        "           {\"WeatherID\" : 6,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Heavy\"},\n",
        "            \n",
        "           {\"WeatherID\" : 7,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Light\"},\n",
        "            \n",
        "           {\"WeatherID\" : 8,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Moderate\"},\n",
        "            \n",
        "           {\"WeatherID\" : 9,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Heavy\"},\n",
        "            \n",
        "           {\"WeatherID\" : 10,\n",
        "             \"WeatherType\" : \"Storm\",\n",
        "             \"Severity\" : \"Severe\"},\n",
        "           ]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol1.insert_many(newDocs1)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "id": "gKhq_9YAIaGJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4dd696d-7226-4d6b-9ee2-890730ae574a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cafb6dcd39962050e390'),\n",
              " ObjectId('63c2cafb6dcd39962050e391'),\n",
              " ObjectId('63c2cafb6dcd39962050e392'),\n",
              " ObjectId('63c2cafb6dcd39962050e393'),\n",
              " ObjectId('63c2cafb6dcd39962050e394'),\n",
              " ObjectId('63c2cafb6dcd39962050e395'),\n",
              " ObjectId('63c2cafb6dcd39962050e396'),\n",
              " ObjectId('63c2cafb6dcd39962050e397'),\n",
              " ObjectId('63c2cafb6dcd39962050e398')]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a collection named fs.files for images \n",
        "#inserting documents (images) into fs.files\n",
        "#insert a given number of documents, and each document can have a slightly different structure\n",
        "#the images being inserted correspond with each type of WeatherType and Severity in WeatherEvents represented by linking it to its respective WeatherID as the foreign key\n",
        "#upload the jpg files to the Files folder on the left hand side toolbar \n",
        "#run the below code individually \n",
        "#the images appear as a new collection in MongoDB with its respective WeatherID\n",
        "\n",
        "#upload image for severe cold\n",
        "fs1=gridfs.GridFS(mydb)\n",
        "severecold = 'cold severe.gif'\n",
        "with open (severecold, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs1.put(contents, filename=\"severecold\", WeatherID = 1)"
      ],
      "metadata": {
        "id": "-N5nmHzRwTw9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "54fc2fdc-9b5b-4894-9728-603f43b88bec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cbf76dcd39962050e401')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for moderate fog\n",
        "fs2=gridfs.GridFS(mydb)\n",
        "fogmoderate = 'fog moderate.jpg'\n",
        "with open (fogmoderate, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs2.put(contents, filename=\"fogmoderate\", WeatherID = 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ek_Hvz5hX9yD",
        "outputId": "c3100516-aaa6-4d80-ba8c-92d56984ad1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cbf96dcd39962050e403')"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for severe fog \n",
        "fs3=gridfs.GridFS(mydb)\n",
        "fogsevere = 'fog severe.jpg'\n",
        "with open (fogsevere, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs3.put(contents, filename=\"fogsevere\", WeatherID = 3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OX0QMWHLb2zk",
        "outputId": "4d07f156-6a1f-4b89-ff0a-f3cca31061f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cbfb6dcd39962050e405')"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for light rain\n",
        "fs4=gridfs.GridFS(mydb)\n",
        "rainlight = \"light rain.jpg\"\n",
        "with open (rainlight, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs4.put(contents, filename=\"rainlight\", WeatherID = 4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-9o7Eg5Ib5Ms",
        "outputId": "e28467b6-9845-41d7-a094-0c1f64d63044"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cbfd6dcd39962050e407')"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for moderate rain\n",
        "fs5=gridfs.GridFS(mydb)\n",
        "rainmoderate = \"rain moderate.jpg\"\n",
        "with open (rainmoderate, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs5.put(contents, filename=\"rainmoderate\", WeatherID = 5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vfz77HWtb9ZX",
        "outputId": "3db1cd74-621d-46ee-80f8-2174d4a71ed6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cbfe6dcd39962050e409')"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for heavy rain\n",
        "fs6=gridfs.GridFS(mydb)\n",
        "rainheavy = \"rain heavy.jpg\"\n",
        "with open (rainheavy, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs6.put(contents, filename=\"rainheavy\", WeatherID = 6)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euRSIACob_YN",
        "outputId": "17444a37-a62a-483a-cd2f-22db3bdd5625"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cc006dcd39962050e40b')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for light snow\n",
        "fs7=gridfs.GridFS(mydb)\n",
        "rainheavy = \"snow light.jpg\"\n",
        "with open (rainheavy, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs7.put(contents, filename=\"snowlight\", WeatherID = 7)"
      ],
      "metadata": {
        "id": "RifYvEUjcBKc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e77bcf7-a073-43cc-9340-1e539bb9327b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cc016dcd39962050e40d')"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for moderate snow\n",
        "fs8=gridfs.GridFS(mydb)\n",
        "rainheavy = \"snow moderate.jpg\"\n",
        "with open (rainheavy, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs8.put(contents, filename=\"snowmoderate\", WeatherID = 8)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yVxhtUbPcEOj",
        "outputId": "a3ed20f9-be57-429c-931c-31fa23a525d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cc026dcd39962050e40f')"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for heavy snow\n",
        "fs9=gridfs.GridFS(mydb)\n",
        "snowheavy = \"snow severe.png\"\n",
        "with open (snowheavy, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs9.put(contents, filename=\"snowheavy\", WeatherID = 9)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hORJtGjOcF-i",
        "outputId": "db18dce9-baa2-40b8-9ccf-63022889c1df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cc046dcd39962050e411')"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload image for severe storm\n",
        "fs10=gridfs.GridFS(mydb)\n",
        "stormsevere = \"strom severe.jpeg\"\n",
        "with open (stormsevere, 'rb') as f:\n",
        "  contents=f.read()\n",
        "\n",
        "fs10.put(contents, filename=\"stormsevere\", WeatherID = 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q0txPExncJcY",
        "outputId": "f06b4c17-5565-4325-c976-3dc3d12c9d25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ObjectId('63c2cc066dcd39962050e415')"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a collection named WeatherLocations\n",
        "mycol2 = mydb[\"WeatherLocations\"]"
      ],
      "metadata": {
        "id": "kdIXtS9KLLSe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#bulk insert documents into WeatherLocations\n",
        "#insert a given number of documents, and each document can have a slightly different structure\n",
        "\n",
        "newDocs2 = [{\"LocationID\" : 1,\n",
        "             \"City\" : \"Florala\",\n",
        "             \"County\" : \"Covington\",\n",
        "             \"State\" : \"AL\",\n",
        "             \"ZipCode\" : \"36442\"},\n",
        "            \n",
        "            {\"LocationID\" : 2,\n",
        "             \"City\" : \"Alexander City\",\n",
        "             \"County\" : \"Tallapoosa\",\n",
        "             \"State\" : \"AL\",\n",
        "             \"ZipCode\" : \"35010\"},\n",
        "            \n",
        "            {\"LocationID\" : 3,\n",
        "             \"City\" : \"North Little Rock\",\n",
        "             \"County\" : \"Pulaski\",\n",
        "             \"State\" : \"AR\",\n",
        "             \"ZipCode\" : \"72118\"},\n",
        "            \n",
        "            {\"LocationID\" : 4,\n",
        "             \"City\" : \"Williams\",\n",
        "             \"County\" : \"Coconino\",\n",
        "             \"State\" : \"AR\",\n",
        "             \"ZipCode\" : \"86046\"},\n",
        "            \n",
        "            {\"LocationID\" : 5,\n",
        "             \"City\" : \"Freedom\",\n",
        "             \"County\" : \"Santa Cruz\",\n",
        "             \"State\" : \"AZ\",\n",
        "             \"ZipCode\" : \"86046\"},\n",
        "            \n",
        "            {\"LocationID\" : 6,\n",
        "             \"City\" : \"Mountain View\",\n",
        "             \"County\" : \"Santa Clara\",\n",
        "             \"State\" : \"CA\",\n",
        "             \"ZipCode\" : \"95019\"},\n",
        "            \n",
        "            {\"LocationID\" : 7,\n",
        "             \"City\" : \"Alta\",\n",
        "             \"County\" : \"Placer\",\n",
        "             \"State\" : \"CA\",\n",
        "             \"ZipCode\" : \"94035\"},\n",
        "            \n",
        "            {\"LocationID\" : 8,\n",
        "             \"City\" : \"East Haven\",\n",
        "             \"County\" : \"New Haven\",\n",
        "             \"State\" : \"CT\",\n",
        "             \"ZipCode\" : \"06512\"},\n",
        "            \n",
        "            {\"LocationID\" : 9,\n",
        "             \"City\" : \"Fort Myers\",\n",
        "             \"County\" : \"Lee\",\n",
        "             \"State\" : \"FL\",\n",
        "             \"ZipCode\" : \"33913\"},\n",
        "            \n",
        "            {\"LocationID\" : 10,\n",
        "             \"City\" : \"Clearwater\",\n",
        "             \"County\" : \"Pinellas\",\n",
        "             \"State\" : \"FL\",\n",
        "             \"ZipCode\" : \"33762\"},\n",
        "            \n",
        "            {\"LocationID\" : 11,\n",
        "             \"City\" : \"Jesup\",\n",
        "             \"County\" : \"Wayne\",\n",
        "             \"State\" : \"GA\",\n",
        "             \"ZipCode\" : \"31546\"},\n",
        "            \n",
        "            {\"LocationID\" : 12,\n",
        "             \"City\" : \"Wheeling\",\n",
        "             \"County\" : \"Cook\",\n",
        "             \"State\" : \"IL\",\n",
        "             \"ZipCode\" : \"60090\"},\n",
        "            \n",
        "            {\"LocationID\" : 13,\n",
        "             \"City\" : \"Muncie\",\n",
        "             \"County\" : \"Delaware\",\n",
        "             \"State\" : \"IN\",\n",
        "             \"ZipCode\" : \"047303\"},\n",
        "            \n",
        "            {\"LocationID\" : 14,\n",
        "             \"City\" : \"Worcester\",\n",
        "             \"County\" : \"Worcester\",\n",
        "             \"State\" : \"MA\",\n",
        "             \"ZipCode\" : \"01602\"},\n",
        "            \n",
        "            {\"LocationID\" : 15,\n",
        "             \"City\" : \"Millville\",\n",
        "             \"County\" : \"Cumberland\",\n",
        "             \"State\" : \"NJ\",\n",
        "             \"ZipCode\" : \"08332\"},\n",
        "            \n",
        "            {\"LocationID\" : 16,\n",
        "             \"City\" : \"Westerly\",\n",
        "             \"County\" : \"Washington\",\n",
        "             \"State\" : \"R1\",\n",
        "             \"ZipCode\" : \"02891\"},\n",
        "            \n",
        "            {\"LocationID\" : 17,\n",
        "             \"City\" : \"El Paso\",\n",
        "             \"County\" : \"El Paso\",\n",
        "             \"State\" : \"TX\",\n",
        "             \"ZipCode\" : \"79925\"},\n",
        "            \n",
        "            {\"LocationID\" : 18,\n",
        "             \"City\" : \"Fort Hood\",\n",
        "             \"County\" : \"Bell\",\n",
        "             \"State\" : \"TX\",\n",
        "             \"ZipCode\" : \"76544\"},\n",
        "            \n",
        "            {\"LocationID\" : 19,\n",
        "             \"City\" : \"Tacoma\",\n",
        "             \"County\" : \"Pierce\",\n",
        "             \"State\" : \"WA\",\n",
        "             \"ZipCode\" : \"98433\"},\n",
        "            \n",
        "            {\"LocationID\" : 20,\n",
        "             \"City\" : \"Sparta\",\n",
        "             \"County\" : \"Monroe\",\n",
        "             \"State\" : \"WI\",\n",
        "             \"ZipCode\" : \"54656\"}\n",
        "            ]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol2.insert_many(newDocs2)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "id": "BJxa0-qiLa9v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "525a8143-7cd7-4b37-d705-fc6fd3271ff8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cb4d6dcd39962050e3b1'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b2'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b3'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b4'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b5'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b6'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b7'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b8'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3b9'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3ba'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3bb'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3bc'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3bd'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3be'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3bf'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3c0'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3c1'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3c2'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3c3'),\n",
              " ObjectId('63c2cb4d6dcd39962050e3c4')]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a collection named Airports\n",
        "mycol3 = mydb[\"Airports\"]"
      ],
      "metadata": {
        "id": "dCbGcABeRKq5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#bulk insert documents into Airports\n",
        "#insert a given number of documents, and each document can have a slightly different structure\n",
        "\n",
        "newDocs3 = [{\"AirportID\" : 1,\n",
        "             \"AirportCode\" : \"KCMY\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 20},\n",
        "            \n",
        "            {\"AirportID\" : 2,\n",
        "             \"AirportCode\" : \"KELP\",\n",
        "             \"TimeZone\" : \"US/Mountain\",\n",
        "             \"LocationID\" : 17},\n",
        "            \n",
        "            {\"AirportID\" : 3,\n",
        "             \"AirportCode\" : \"KGRF\",\n",
        "             \"TimeZone\" : \"US/Pacific\",\n",
        "             \"LocationID\" : 19},\n",
        "            \n",
        "            {\"AirportID\" : 4,\n",
        "             \"AirportCode\" : \"KHLR\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 18},\n",
        "            \n",
        "            {\"AirportID\" : 5,\n",
        "             \"AirportCode\" : \"KPIE\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 10},\n",
        "            \n",
        "            {\"AirportID\" : 6,\n",
        "             \"AirportCode\" : \"KNUQ\",\n",
        "             \"TimeZone\" : \"US/Pacific\",\n",
        "             \"LocationID\" : 6},\n",
        "            \n",
        "            {\"AirportID\" : 7,\n",
        "             \"AirportCode\" : \"KBLU\",\n",
        "             \"TimeZone\" : \"US/Pacific\",\n",
        "             \"LocationID\" : 7},\n",
        "            \n",
        "            {\"AirportID\" : 8,\n",
        "             \"AirportCode\" : \"KJES\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 11},\n",
        "            \n",
        "            {\"AirportID\" : 9,\n",
        "             \"AirportCode\" : \"KWVI\",\n",
        "             \"TimeZone\" : \"US/Pacific\",\n",
        "             \"LocationID\" : 5},\n",
        "            \n",
        "            {\"AirportID\" : 10,\n",
        "             \"AirportCode\" : \"KHVN\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 8},\n",
        "            \n",
        "            {\"AirportID\" : 11,\n",
        "             \"AirportCode\" : \"KWST\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 16},\n",
        "            \n",
        "            {\"AirportID\" : 12,\n",
        "             \"AirportCode\" : \"KOJ4\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 1},\n",
        "            \n",
        "            {\"AirportID\" : 13,\n",
        "             \"AirportCode\" : \"KRSW\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 9},\n",
        "            \n",
        "            {\"AirportID\" : 14,\n",
        "             \"AirportCode\" : \"KORH\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 14},\n",
        "            \n",
        "            {\"AirportID\" : 15,\n",
        "             \"AirportCode\" : \"KALX\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 2},\n",
        "            \n",
        "            {\"AirportID\" : 16,\n",
        "             \"AirportCode\" : \"KLZK\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 3},\n",
        "            \n",
        "            {\"AirportID\" : 17,\n",
        "             \"AirportCode\" : \"KPWK\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 12},\n",
        "            \n",
        "            {\"AirportID\" : 18,\n",
        "             \"AirportCode\" : \"KMIE\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 13},\n",
        "            \n",
        "            {\"AirportID\" : 19,\n",
        "             \"AirportCode\" : \"KCMR\",\n",
        "             \"TimeZone\" : \"US/Mountain\",\n",
        "             \"LocationID\" : 4},\n",
        "            \n",
        "            {\"AirportID\" : 20,\n",
        "             \"AirportCode\" : \"KMIV\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 15}\n",
        "           \n",
        "            ]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol3.insert_many(newDocs3)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "id": "ZVRvuqX5Rk6d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05efdb91-7dae-4ac8-a373-4b5e41b67cbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cb526dcd39962050e3c5'),\n",
              " ObjectId('63c2cb526dcd39962050e3c6'),\n",
              " ObjectId('63c2cb526dcd39962050e3c7'),\n",
              " ObjectId('63c2cb526dcd39962050e3c8'),\n",
              " ObjectId('63c2cb526dcd39962050e3c9'),\n",
              " ObjectId('63c2cb526dcd39962050e3ca'),\n",
              " ObjectId('63c2cb526dcd39962050e3cb'),\n",
              " ObjectId('63c2cb526dcd39962050e3cc'),\n",
              " ObjectId('63c2cb526dcd39962050e3cd'),\n",
              " ObjectId('63c2cb526dcd39962050e3ce'),\n",
              " ObjectId('63c2cb526dcd39962050e3cf'),\n",
              " ObjectId('63c2cb526dcd39962050e3d0'),\n",
              " ObjectId('63c2cb526dcd39962050e3d1'),\n",
              " ObjectId('63c2cb526dcd39962050e3d2'),\n",
              " ObjectId('63c2cb526dcd39962050e3d3'),\n",
              " ObjectId('63c2cb526dcd39962050e3d4'),\n",
              " ObjectId('63c2cb526dcd39962050e3d5'),\n",
              " ObjectId('63c2cb526dcd39962050e3d6'),\n",
              " ObjectId('63c2cb526dcd39962050e3d7'),\n",
              " ObjectId('63c2cb526dcd39962050e3d8')]"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a collection named DailyWeather\n",
        "mycol4 = mydb[\"DailyWeather\"]"
      ],
      "metadata": {
        "id": "Xx-NkMtNT9A3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#bulk insert documents into DailyWeather\n",
        "#insert a given number of documents, and each document can have a slightly different structure\n",
        "\n",
        "#import the library datetime\n",
        "#allows you to record dates and times in the documents\n",
        "\n",
        "import datetime\n",
        "\n",
        "newDocs4 = [{\"DailyWeather\" : 1,\n",
        "             \"Date\" : datetime.datetime(2017, 9, 26),\n",
        "             \"WeatherID\" : 5,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 20,\n",
        "             \"AirportID\": 1,\n",
        "             \"Precipitation\" : 0.19},\n",
        "            \n",
        "            {\"DailyWeather\" : 2,\n",
        "             \"Date\" : datetime.datetime(2021, 1, 31),\n",
        "             \"WeatherID\" : 9,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Heavy\",\n",
        "             \"LocationID\" : 13,\n",
        "             \"AirportID\": 18,\n",
        "             \"Precipitation\" : 0.07},\n",
        "            \n",
        "            {\"DailyWeather\" : 3,\n",
        "             \"Date\" : datetime.datetime(2016, 12, 18),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 20,\n",
        "             \"AirportID\": 1,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 4,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 5),\n",
        "             \"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 19,\n",
        "             \"AirportID\": 3,\n",
        "             \"Precipitation\" : 0.01},\n",
        "            \n",
        "            {\"DailyWeather\" : 5,\n",
        "             \"Date\" : datetime.datetime(2017, 2, 17),\n",
        "             \"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 6,\n",
        "             \"AirportID\": 6,\n",
        "             \"Precipitation\" : 0.05},\n",
        "            \n",
        "            {\"DailyWeather\" : 6,\n",
        "             \"Date\" : datetime.datetime(2021, 12, 16),\n",
        "             \"WeatherID\" : 10,\n",
        "             \"WeatherType\" : \"Storm\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 20,\n",
        "             \"AirportID\": 1,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 7,\n",
        "             \"Date\" : datetime.datetime(2017, 4, 7),\n",
        "             \"WeatherID\" : 10,\n",
        "             \"WeatherType\" : \"Storm\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 7,\n",
        "             \"AirportID\": 7,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 8,\n",
        "             \"Date\" : datetime.datetime(2021, 8, 10),\n",
        "             \"WeatherID\" : 10,\n",
        "             \"WeatherType\" : \"Storm\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 19,\n",
        "             \"AirportID\": 3,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 9,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 9),\n",
        "             \"WeatherID\" : 3,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 1,\n",
        "             \"AirportID\": 12,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 10,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 22),\n",
        "             \"WeatherID\" : 6,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Heavy\",\n",
        "             \"LocationID\" : 1,\n",
        "             \"AirportID\": 12,\n",
        "             \"Precipitation\" : 0.29},\n",
        "            \n",
        "            {\"DailyWeather\" : 11,\n",
        "             \"Date\" : datetime.datetime(2019, 7, 21),\n",
        "             \"WeatherID\" : 2,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 18,\n",
        "             \"AirportID\": 4,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 12,\n",
        "             \"Date\" : datetime.datetime(2017, 2, 27),\n",
        "             \"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 2,\n",
        "             \"AirportID\": 15,\n",
        "             \"Precipitation\" : 0.2},\n",
        "            \n",
        "            {\"DailyWeather\" : 13,\n",
        "             \"Date\" : datetime.datetime(2018, 9, 28),\n",
        "             \"WeatherID\" : 3,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 18,\n",
        "             \"AirportID\": 4,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 14,\n",
        "             \"Date\" : datetime.datetime(2019, 10, 17),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 3,\n",
        "             \"AirportID\": 16,\n",
        "             \"Precipitation\" : 0},\n",
        "            \n",
        "            {\"DailyWeather\" : 15,\n",
        "             \"Date\" : datetime.datetime(2016, 2, 5),\n",
        "             \"WeatherID\" : 9,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Heavy\",\n",
        "             \"LocationID\" : 16,\n",
        "             \"AirportID\": 11,\n",
        "             \"Precipitation\" : 0.1},\n",
        "            \n",
        "            {\"DailyWeather\" : 16,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 10),\n",
        "             \"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 9,\n",
        "             \"AirportID\": 13,\n",
        "             \"Precipitation\" : 0.2},\n",
        "            \n",
        "            {\"DailyWeather\" : 17,\n",
        "             \"Date\" : datetime.datetime(2016, 4, 2),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 14,\n",
        "             \"AirportID\": 14,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 18,\n",
        "             \"Date\" : datetime.datetime(2021, 1, 24),\n",
        "             \"WeatherID\" : 7,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 4,\n",
        "             \"AirportID\": 19,\n",
        "             \"Precipitation\" : 0.03},\n",
        "             \n",
        "             {\"DailyWeather\" : 19,\n",
        "             \"Date\" : datetime.datetime(2019, 2, 14),\n",
        "             \"WeatherID\" : 9,\n",
        "             \"WeatherType\" : \"Storm\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 7,\n",
        "             \"AirportID\": 7,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 20,\n",
        "             \"Date\" : datetime.datetime(2016, 2, 13),\n",
        "             \"WeatherID\" : 2,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 5,\n",
        "             \"AirportID\": 9,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 21,\n",
        "             \"Date\" : datetime.datetime(2016, 6, 3),\n",
        "             \"WeatherID\" : 2,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 11,\n",
        "             \"AirportID\": 18,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 22,\n",
        "             \"Date\" : datetime.datetime(2020, 6, 5),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 8,\n",
        "             \"AirportID\": 10,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 23,\n",
        "             \"Date\" : datetime.datetime(2017, 9, 24),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 17,\n",
        "             \"AirportID\": 2,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 24,\n",
        "             \"Date\" : datetime.datetime(2018, 8, 13),\n",
        "             \"WeatherID\" : 3,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 5,\n",
        "             \"AirportID\": 9,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 25,\n",
        "             \"Date\" : datetime.datetime(2018, 1, 3),\n",
        "             \"WeatherID\" : 1,\n",
        "             \"WeatherType\" : \"Cold\",\n",
        "             \"Severity\" : \"Severe\",\n",
        "             \"LocationID\" : 15,\n",
        "             \"AirportID\": 20,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 26,\n",
        "             \"Date\" : datetime.datetime(2016, 5, 13),\n",
        "             \"WeatherID\" : 2,\n",
        "             \"WeatherType\" : \"Fog\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 10,\n",
        "             \"AirportID\": 5,\n",
        "             \"Precipitation\" : 0},\n",
        "\n",
        "             {\"DailyWeather\" : 27,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 16),\n",
        "             \"WeatherID\" : 5,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 6,\n",
        "             \"AirportID\": 6,\n",
        "             \"Precipitation\" : 0.1},\n",
        "\n",
        "             {\"DailyWeather\" : 28,\n",
        "             \"Date\" : datetime.datetime(2019, 4, 14),\n",
        "             \"WeatherID\" : 8,\n",
        "             \"WeatherType\" : \"Snow\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 12,\n",
        "             \"AirportID\": 17,\n",
        "             \"Precipitation\" : 0.06},\n",
        "\n",
        "             {\"DailyWeather\" : 29,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 27),\n",
        "             \"WeatherID\" : 5,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Moderate\",\n",
        "             \"LocationID\" : 10,\n",
        "             \"AirportID\": 5,\n",
        "             \"Precipitation\" : 0.29},\n",
        "\n",
        "             {\"DailyWeather\" : 30,\n",
        "             \"Date\" : datetime.datetime(2016, 1, 19),\n",
        "             \"WeatherID\" : 4,\n",
        "             \"WeatherType\" : \"Rain\",\n",
        "             \"Severity\" : \"Light\",\n",
        "             \"LocationID\" : 6,\n",
        "             \"AirportID\": 6,\n",
        "             \"Precipitation\" : 0.19}\n",
        "\n",
        "            ]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol4.insert_many(newDocs4)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "id": "gye79PJKUF0W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63993341-6bfb-458e-db75-87b197618724"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cb576dcd39962050e3d9'),\n",
              " ObjectId('63c2cb576dcd39962050e3da'),\n",
              " ObjectId('63c2cb576dcd39962050e3db'),\n",
              " ObjectId('63c2cb576dcd39962050e3dc'),\n",
              " ObjectId('63c2cb576dcd39962050e3dd'),\n",
              " ObjectId('63c2cb576dcd39962050e3de'),\n",
              " ObjectId('63c2cb576dcd39962050e3df'),\n",
              " ObjectId('63c2cb576dcd39962050e3e0'),\n",
              " ObjectId('63c2cb576dcd39962050e3e1'),\n",
              " ObjectId('63c2cb576dcd39962050e3e2'),\n",
              " ObjectId('63c2cb576dcd39962050e3e3'),\n",
              " ObjectId('63c2cb576dcd39962050e3e4'),\n",
              " ObjectId('63c2cb576dcd39962050e3e5'),\n",
              " ObjectId('63c2cb576dcd39962050e3e6'),\n",
              " ObjectId('63c2cb576dcd39962050e3e7'),\n",
              " ObjectId('63c2cb576dcd39962050e3e8'),\n",
              " ObjectId('63c2cb576dcd39962050e3e9'),\n",
              " ObjectId('63c2cb576dcd39962050e3ea'),\n",
              " ObjectId('63c2cb576dcd39962050e3eb'),\n",
              " ObjectId('63c2cb576dcd39962050e3ec'),\n",
              " ObjectId('63c2cb576dcd39962050e3ed'),\n",
              " ObjectId('63c2cb576dcd39962050e3ee'),\n",
              " ObjectId('63c2cb576dcd39962050e3ef'),\n",
              " ObjectId('63c2cb576dcd39962050e3f0'),\n",
              " ObjectId('63c2cb576dcd39962050e3f1'),\n",
              " ObjectId('63c2cb576dcd39962050e3f2'),\n",
              " ObjectId('63c2cb576dcd39962050e3f3'),\n",
              " ObjectId('63c2cb576dcd39962050e3f4'),\n",
              " ObjectId('63c2cb576dcd39962050e3f5'),\n",
              " ObjectId('63c2cb576dcd39962050e3f6')]"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Indexes\n",
        "\n",
        "Indexes support the efficient execution of queries in MongoDB. If an appropriate index exits for a query, MongoDB uses the index to limit the number of documents it must inspect. \n",
        "\n",
        "The index stores the value of a specific field or set of fields, ordered by the value of the field. \n",
        "\n",
        "The ordering of the index entries supports efficient equlity matches and range-based query operations. MongoDB can return sorted results by using the ordering in the index."
      ],
      "metadata": {
        "id": "4ks3e6TxSDkN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Triggers\n",
        "\n",
        "Triggers allow for executing server-side logic whenever a document is added, updated, or removed in a linked MongoDB Atlas cluster. The triggers run on a serverless compute layer that scales independently of the database server.\n",
        "\n",
        "Database triggers are implemented for event-driven data interactions. They use MongoDB change streams to watch for real-time changes in a collection. A change stream is a series of \n",
        "database events that each describe an operation on a document in the collection. \n",
        "\n",
        "There are four types of database change events: \n",
        "\n",
        "INSERT: Represents a new document added to the collection\n",
        "\n",
        "UPDATE: Represents a change to an existing document in the collection \n",
        "\n",
        "DELETE: Represents a document deleted from the collection"
      ],
      "metadata": {
        "id": "6_upWWClbqOs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 1\n",
        "#Order WeatherLocations in descending order by LocationID\n",
        "\n",
        "result = mydb.WeatherLocations.create_index([('LocationID', pymongo.DESCENDING)], unique=True)\n",
        "sorted(list(mydb.WeatherLocations.index_information()))"
      ],
      "metadata": {
        "id": "BpkINCEWSO0E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "436d3eca-3a9e-41e9-e480-2dba35cf860b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['LocationID_-1', '_id_']"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 1 query\n",
        "#Simulates INSERT trigger \n",
        "#inserting some data\n",
        "\n",
        "newDocs2 = [{\"LocationID\" : 21,\n",
        "             \"City\" : \"Milwaukee\",\n",
        "             \"County\" : \"Milwaukee\",\n",
        "             \"State\" : \"WI\",\n",
        "             \"ZipCode\" : \"53207\"},\n",
        "            \n",
        "            {\"LocationID\" : 22,\n",
        "             \"City\" : \"Atlus\",\n",
        "             \"County\" : \"Jackson\",\n",
        "             \"State\" : \"OK\",\n",
        "             \"ZipCode\" : \"73521\"},\n",
        "            \n",
        "            {\"LocationID\" : 23,\n",
        "             \"City\" : \"Albert Lea\",\n",
        "             \"County\" : \"Freeborn\",\n",
        "             \"State\" : \"MN\",\n",
        "             \"ZipCode\" : \"56007\"},\n",
        "            \n",
        "            {\"LocationID\" : 24,\n",
        "             \"City\" : \"Batan Rouge\",\n",
        "             \"County\" : \"East Batan Rouge\",\n",
        "             \"State\" : \"LA\",\n",
        "             \"ZipCode\" : \"70807\"},\n",
        "            \n",
        "            {\"LocationID\" : 25,\n",
        "             \"City\" : \"Grant Rapids\",\n",
        "             \"County\" : \"Kent\",\n",
        "             \"State\" : \"MI\",\n",
        "             \"ZipCode\" : \"49512\"}]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol2.insert_many(newDocs2)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "id": "3gMDU8r8SSyZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "416c6e9c-fe0f-4774-940b-d07fb05e2e16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cb5e6dcd39962050e3f7'),\n",
              " ObjectId('63c2cb5e6dcd39962050e3f8'),\n",
              " ObjectId('63c2cb5e6dcd39962050e3f9'),\n",
              " ObjectId('63c2cb5e6dcd39962050e3fa'),\n",
              " ObjectId('63c2cb5e6dcd39962050e3fb')]"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Inserting a document into mycol2 checks whether the document already exists by checking if the unique Location ID already exists in the WeatherLocations collection\n",
        "newDocs2 = {\"LocationID\" : 23,\n",
        "             \"City\" : \"Kansas City\",\n",
        "             \"County\" : \"Klay\",\n",
        "             \"State\" : \"MO\",\n",
        "             \"ZipCode\" : \"64116\"}\n",
        "\n",
        "result = mycol2.insert_one(newDocs2)\n",
        "result.inserted_ids\n",
        "\n",
        "#This query returns an error because it is add a document with a document number that already exists \n",
        "#Prints a DuplicateKeyError message\n",
        "#This is a unique index violation, therefore it raises the appropriate error"
      ],
      "metadata": {
        "id": "3jSD_7LsXlwl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "b023928c-a62d-4a1c-9360-6cc2036f04a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "DuplicateKeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mDuplicateKeyError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-b26ee9b1462a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m              \"ZipCode\" : \"64116\"}\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmycol2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert_one\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewDocs2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minserted_ids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36minsert_one\u001b[0;34m(self, document, bypass_document_validation, session, comment)\u001b[0m\n\u001b[1;32m    626\u001b[0m         \u001b[0mwrite_concern\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_write_concern_for\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    627\u001b[0m         return InsertOneResult(\n\u001b[0;32m--> 628\u001b[0;31m             self._insert_one(\n\u001b[0m\u001b[1;32m    629\u001b[0m                 \u001b[0mdocument\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    630\u001b[0m                 \u001b[0mordered\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36m_insert_one\u001b[0;34m(self, doc, ordered, write_concern, op_id, bypass_doc_val, session, comment)\u001b[0m\n\u001b[1;32m    567\u001b[0m             \u001b[0m_check_write_command_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 569\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__database\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retryable_write\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0macknowledged\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_insert_command\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    570\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRawBSONDocument\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retryable_write\u001b[0;34m(self, retryable, func, session)\u001b[0m\n\u001b[1;32m   1474\u001b[0m         \u001b[0;34m\"\"\"Internal retryable write helper.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tmp_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1476\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_with_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretryable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1478\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__eq__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retry_with_session\u001b[0;34m(self, retryable, func, session, bulk)\u001b[0m\n\u001b[1;32m   1347\u001b[0m             \u001b[0mretryable\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretry_writes\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msession\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0min_transaction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1348\u001b[0m         )\n\u001b[0;32m-> 1349\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretryable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbulk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1350\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1351\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_csot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/_csot.py\u001b[0m in \u001b[0;36mcsot_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    103\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0m_TimeoutContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcsot_wrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retry_internal\u001b[0;34m(self, retryable, func, session, bulk)\u001b[0m\n\u001b[1;32m   1388\u001b[0m                             \u001b[0;32mraise\u001b[0m \u001b[0mlast_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1389\u001b[0m                         \u001b[0mretryable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1390\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretryable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1391\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mServerSelectionTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mis_retrying\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36m_insert_command\u001b[0;34m(session, sock_info, retryable_write)\u001b[0m\n\u001b[1;32m    565\u001b[0m             )\n\u001b[1;32m    566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m             \u001b[0m_check_write_command_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__database\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retryable_write\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0macknowledged\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_insert_command\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py\u001b[0m in \u001b[0;36m_check_write_command_response\u001b[0;34m(result)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0mwrite_errors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"writeErrors\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mwrite_errors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0m_raise_last_write_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrite_errors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0mwce\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_wce_doc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py\u001b[0m in \u001b[0;36m_raise_last_write_error\u001b[0;34m(write_errors)\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwrite_errors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m11000\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mDuplicateKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"errmsg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m11000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    190\u001b[0m     \u001b[0;32mraise\u001b[0m \u001b[0mWriteError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"errmsg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mDuplicateKeyError\u001b[0m: E11000 duplicate key error collection: Weather.WeatherLocations index: LocationID_-1 dup key: { LocationID: 23 }, full error: {'index': 0, 'code': 11000, 'keyPattern': {'LocationID': -1}, 'keyValue': {'LocationID': 23}, 'errmsg': 'E11000 duplicate key error collection: Weather.WeatherLocations index: LocationID_-1 dup key: { LocationID: 23 }'}"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 2 \n",
        "#Order Airports by AirportID in descending order \n",
        "\n",
        "result = mydb.Airports.create_index([('AirportID', pymongo.DESCENDING)], unique=True)\n",
        "sorted(list(mydb.Airports.index_information()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JxO04Hhyy_5",
        "outputId": "69c15a47-1e6f-4e6c-d39c-72b6dd65e33f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['AirportID_-1', '_id_']"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 2 query\n",
        "#Simulates INSERT trigger \n",
        "#inserting some data\n",
        "\n",
        "newDocs3=[ {\"AirportID\" : 21,\n",
        "             \"AirportCode\" : \"KMKE\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 5},\n",
        "            \n",
        "            {\"AirportID\" : 22,\n",
        "             \"AirportCode\" : \"KAXS\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 9},\n",
        "            \n",
        "            {\"AirportID\" : 23,\n",
        "             \"AirportCode\" : \"KAEL\",\n",
        "             \"TimeZone\" : \"US/Central\",\n",
        "             \"LocationID\" : 11}]\n",
        "\n",
        "#retrieve the objectID for all the inserted documents\n",
        "result = mycol3.insert_many(newDocs3)\n",
        "result.inserted_ids"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l8V7wR9V1Isk",
        "outputId": "a675c1e7-a872-4ad5-82ef-267ab5d03bc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[ObjectId('63c2cb646dcd39962050e3fd'),\n",
              " ObjectId('63c2cb646dcd39962050e3fe'),\n",
              " ObjectId('63c2cb646dcd39962050e3ff')]"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Inserting a document into mycol2 checks whether the document already exists by checking if the unique Location ID already exists in the WeatherLocations collection\n",
        "newDocs3 = {\"AirportID\" : 22,\n",
        "             \"AirportCode\" : \"K04V\",\n",
        "             \"TimeZone\" : \"US/Eastern\",\n",
        "             \"LocationID\" : 14 }\n",
        "\n",
        "result = mycol2.insert_one(newDocs3)\n",
        "result.inserted_ids\n",
        "#This query returns an error because it is add a document with a document number that already exists \n",
        "#Prints a DuplicateKeyError message\n",
        "#This is a unique index violation, therefore it raises the appropriate error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "5py1xOCl7fMP",
        "outputId": "39267716-ccc5-4542-af45-4bf3e1d71602"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "DuplicateKeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mDuplicateKeyError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-6723ead34f99>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m              \"LocationID\" : 14 }\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmycol2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert_one\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewDocs3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minserted_ids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m#This query returns an error because it is add a document with a document number that already exists\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36minsert_one\u001b[0;34m(self, document, bypass_document_validation, session, comment)\u001b[0m\n\u001b[1;32m    626\u001b[0m         \u001b[0mwrite_concern\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_write_concern_for\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    627\u001b[0m         return InsertOneResult(\n\u001b[0;32m--> 628\u001b[0;31m             self._insert_one(\n\u001b[0m\u001b[1;32m    629\u001b[0m                 \u001b[0mdocument\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    630\u001b[0m                 \u001b[0mordered\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36m_insert_one\u001b[0;34m(self, doc, ordered, write_concern, op_id, bypass_doc_val, session, comment)\u001b[0m\n\u001b[1;32m    567\u001b[0m             \u001b[0m_check_write_command_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 569\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__database\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retryable_write\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0macknowledged\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_insert_command\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    570\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRawBSONDocument\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retryable_write\u001b[0;34m(self, retryable, func, session)\u001b[0m\n\u001b[1;32m   1474\u001b[0m         \u001b[0;34m\"\"\"Internal retryable write helper.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tmp_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1476\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_with_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretryable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1478\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__eq__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retry_with_session\u001b[0;34m(self, retryable, func, session, bulk)\u001b[0m\n\u001b[1;32m   1347\u001b[0m             \u001b[0mretryable\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretry_writes\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msession\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0min_transaction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1348\u001b[0m         )\n\u001b[0;32m-> 1349\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretryable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbulk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1350\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1351\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_csot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/_csot.py\u001b[0m in \u001b[0;36mcsot_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    103\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0m_TimeoutContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcsot_wrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py\u001b[0m in \u001b[0;36m_retry_internal\u001b[0;34m(self, retryable, func, session, bulk)\u001b[0m\n\u001b[1;32m   1388\u001b[0m                             \u001b[0;32mraise\u001b[0m \u001b[0mlast_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1389\u001b[0m                         \u001b[0mretryable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1390\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretryable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1391\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mServerSelectionTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mis_retrying\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/collection.py\u001b[0m in \u001b[0;36m_insert_command\u001b[0;34m(session, sock_info, retryable_write)\u001b[0m\n\u001b[1;32m    565\u001b[0m             )\n\u001b[1;32m    566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m             \u001b[0m_check_write_command_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__database\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retryable_write\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0macknowledged\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_insert_command\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py\u001b[0m in \u001b[0;36m_check_write_command_response\u001b[0;34m(result)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0mwrite_errors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"writeErrors\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mwrite_errors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0m_raise_last_write_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrite_errors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0mwce\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_wce_doc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py\u001b[0m in \u001b[0;36m_raise_last_write_error\u001b[0;34m(write_errors)\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwrite_errors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m11000\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mDuplicateKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"errmsg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m11000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    190\u001b[0m     \u001b[0;32mraise\u001b[0m \u001b[0mWriteError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"errmsg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mDuplicateKeyError\u001b[0m: E11000 duplicate key error collection: Weather.WeatherLocations index: LocationID_-1 dup key: { LocationID: 14 }, full error: {'index': 0, 'code': 11000, 'keyPattern': {'LocationID': -1}, 'keyValue': {'LocationID': 14}, 'errmsg': 'E11000 duplicate key error collection: Weather.WeatherLocations index: LocationID_-1 dup key: { LocationID: 14 }'}"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Proof of Index 2\n",
        "\n",
        "#The for loop below loops through each index in the Airports collection and returns a list of the attributes of each index.  The first index it returns is the default id index created by mongodb and the second index it returns is the index we created of the AirportID in descending order.  Thus proving the creation of the index was successful and it exists in the Airports collection. \n",
        "for index in mydb.Airports.list_indexes():\n",
        "    print(index)\n",
        "#The line of code below prints all the information about the indexes in the Airports collections.  This first result it returns is the default _id index and the second line it returns is the index Airport_-1 we created and its attributes in a dictionary format.  Thus, once again proving that we created the index successfully and it exists in the Airports collection.\n",
        "mydb.Airports.index_information()"
      ],
      "metadata": {
        "id": "Y86mhH2bP4tZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5fed882-7805-4342-96a7-c6028b339a97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SON([('v', 2), ('key', SON([('_id', 1)])), ('name', '_id_')])\n",
            "SON([('v', 2), ('key', SON([('AirportID', -1)])), ('name', 'AirportID_-1'), ('unique', True)])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'_id_': {'v': 2, 'key': [('_id', 1)]},\n",
              " 'AirportID_-1': {'v': 2, 'key': [('AirportID', -1)], 'unique': True}}"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Below are two more static and dynamic indexes that can be used for similar queries as displayed above and for other aggregation queries "
      ],
      "metadata": {
        "id": "IQy0e61LhAN0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 3 \n",
        "#Order fs.files by WeatherID in descending order \n",
        "result = mydb.fs.files.create_index([('WeatherID', pymongo.DESCENDING)], unique=True)\n",
        "sorted(list(mydb.fs.files.index_information()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GAOqiFdPnOz-",
        "outputId": "8531f7b4-70a8-46cd-a89b-701828c5956d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['WeatherID_-1', '_id_', 'filename_1_uploadDate_1']"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Index 4\n",
        "#Order DailyWeather by Precipitation in Ascending order\n",
        "#Google Collab is not able to read \"DailyWeather\" into the index code, however, it is able to create an index of DailyWeather using the alternative name of DailyWeather which is mycol4\n",
        "#As a result the index for DailyWeather appears as a new collection in MongoDB under the collection name \"mycol4\"\n",
        "result = mydb.mycol4.create_index([('Precipitation', pymongo.ASCENDING)], unique=True)\n",
        "sorted(list(mydb.mycol4.index_information()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WcAjEgpIw1sm",
        "outputId": "53f93f95-a8fe-4a74-f590-54206d98dcec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Precipitation_1', '_id_']"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "MongoDB Triggers \n",
        "\n",
        "Trigger #1 \n",
        "\n",
        "UPDATE Trigger \n",
        "\n",
        "This trigger aims to update the Precipitation to 0.99 of all documents in the DailyWeather collection which have a WeatherID of 6 with a WeatherType of Rain and a Severity of Heavy. It allows the user to make changes to the Precipitation for a given WeatherID.\n"
      ],
      "metadata": {
        "id": "MvdjLWjZfwIV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Trigger 1\n",
        "#Triggers created directly in MongoDB\n",
        "#This is an update trigger which can update the Precipitation of a document in the Daily Weather collection for a given WeatherID\n",
        "#The trigger is being modelled and tested with the below example\n",
        "#Creating a update trigger to update the Precipitation of each document in the Daily Weather collection with a WeatherID of 6 to 0.99\n",
        "#Below is the code written in the Function section of the MongoDB UI that allows you to write a code for the update trigger\n",
        "#First, we create NewWeatherType which retrieves the DailyWeather collection using context.services.get()\n",
        "#Then, we use the updateOne operation in the changeEvents stream to update the documents in the Daily Weather collection\n",
        "#The first parameter means takes all the documents with WeatherID 6 and then the next line of code sets the Percipitation to .99\n",
        "#Lastly, if the trigger is run successfully the result will print \"Heavy Rain Percipitation updated successfully\" \n",
        "#and if the trigger is unsuccessful then the result will print \"Heavy Rain Percipitation update failed\"\n",
        "\n",
        "'''\n",
        "exports = async function(UpdateDailyWeather) {\n",
        "  \n",
        "  const NewWeatherType= context.services.get(\"Weather\").db(\"Weather\").collection(\"DailyWeather\");\n",
        "  \n",
        "  try {\n",
        "   await NewWeatherType.updateOne(\n",
        "       { \"WeatherID\": 6 },\n",
        "       { $set: { \"Precipitation\" : .99} }     \n",
        "    );\n",
        "    console.log(\"Precipitation updated successfully\");\n",
        "    \n",
        "  } catch (err) {\n",
        "    \n",
        "    console.error(\"Precipitation update failed\", err);\n",
        "  } \n",
        "  return; };\n",
        "'''"
      ],
      "metadata": {
        "id": "RzP9_lfkeUFf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "f320ef81-e222-4889-9985-7c777b20878a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nexports = async function(UpdateDailyWeather) {\\n  \\n  const NewWeatherType= context.services.get(\"Weather\").db(\"Weather\").collection(\"DailyWeather\");\\n  \\n  try {\\n   await NewWeatherType.updateOne(\\n       { \"WeatherID\": 6 },\\n       { $set: { \"Precipitation\" : .99} }     \\n    );\\n    console.log(\"Precipitation updated successfully\");\\n    \\n  } catch (err) {\\n    \\n    console.error(\"Precipitation update failed\", err);\\n  } \\n  return; };\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Trigger 2\n",
        "\n",
        "INSERT Trigger\n",
        "\n",
        "This trigger aims to insert a new WeatherEvent called Hurricane with Severity of Severe into the WeatherEvents collection. It allows the user to insert new documents in the WeatherEvents collection."
      ],
      "metadata": {
        "id": "9QDsYBcWTMqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Trigger 2\n",
        "#Triggers created directly in MongoDB\n",
        "#This is an insert trigger which inserts a new document in the WeatherEvents collection with a given WeatherID, WeatherType, and Severity \n",
        "#The trigger is being modelled and tested with the below example\n",
        "#Creating a insert trigger to insert a new document with the WeatherID: 11, WeatherType: \"Hurricane\", Severity: \"Severe\"\n",
        "#First, we create NewWeatherEvent which retrieves the WeatherEvents collection using context.services.get() \n",
        "#Then, we use the insertOne operation on NewWeatherEvent to insert a new document in the collection\n",
        "#In the parameter write WeatherID: 11, WeatherType: \"Hurricane\", Severity: \"Severe\" for the new document\n",
        "#Lastly, if the trigger is run successfully the result will print \"Weather Event inserted successfully\" and if the trigger is unsuccessful\n",
        "#then the result will print \"Failed to insert Weather Event\"\n",
        "\n",
        "'''\n",
        "exports = async function(InsertWeatherEvents) {\n",
        "  \n",
        "  const NewWeatherEvent= context.services.get(\"Weather\").db(\"Weather\").collection(\"WeatherEvents\");\n",
        "  \n",
        "  try {\n",
        "   await NewWeatherEvent.insertOne(\n",
        "       {\"WeatherID\" : 11,\n",
        "        \"WeatherType\" : \"Hurricane\",\n",
        "        \"Severity\" : \"Severe\"} \n",
        "    );\n",
        "    console.log(\"Weather Event inserted successfully\");\n",
        "    \n",
        "  } catch (err) {\n",
        "    \n",
        "    console.error(\"Failed to insert Weather Event\", err);\n",
        "  }\n",
        "  \n",
        "  return; };\n",
        "\n",
        "'''\n"
      ],
      "metadata": {
        "id": "FQT1z3wUeVCl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "669c5bd7-811a-4fe2-bf7f-a326929e6be9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nexports = async function(InsertWeatherEvents) {\\n  \\n  const NewWeatherEvent= context.services.get(\"Weather\").db(\"Weather\").collection(\"WeatherEvents\");\\n  \\n  try {\\n   await NewWeatherEvent.insertOne(\\n       {\"WeatherID\" : 11,\\n        \"WeatherType\" : \"Hurricane\",\\n        \"Severity\" : \"Severe\"} \\n    );\\n    console.log(\"Weather Event inserted successfully\");\\n    \\n  } catch (err) {\\n    \\n    console.error(\"Failed to insert Weather Event\", err);\\n  }\\n  \\n  return; };\\n\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Views \n",
        "\n",
        "MongoDB views are read-only queryable objects whose contents are defined by an aggregation pipeline on other collections or views. \n",
        "There are two types of views: \n",
        "1. Standard views: computed as read views, not stored to disk\n",
        "2. On-demand materalized views: stored on and read from disk using \"merge\" and \"out\" stage to update the saved data \n"
      ],
      "metadata": {
        "id": "XEWfWtsceLam"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#View 1\n",
        "#Creating a View of the WeatherLocations and Airports collection by joining them on LocationID\n",
        "#Store aggregation pipeline in variable named 'resultv' \n",
        "#Create a view for the collection using an aggregation pipeline on WeatherLocations\n",
        "#Use an aggregation pipeline in the first stage using lookup which joins WeatherLocations and Airports using LocationID \n",
        "#The project stage of the aggregation piepline determines which fields should be displayed in the view\n",
        "#All the fields are displayed to provide useful information for the user reagrding the geographic information that the airport weather station records the daily weather for\n",
        "#The last stage of the aggregation pipeline is the $out stage which creates the \"AirportLocation_view\" and stores all the joined documents in that view in the database\n",
        "#Type of view: on-demand materialized view\n",
        "#This view is being created as a on-demand materialized views so that it is stored on MongoDB and can be used in queries \n",
        "#Why each view if needed in the context of your chosen application: In the context of this database, this view is needed to retrieve the Airport information about each geographic location.\n",
        "#By joining the collections on Location ID, it displays AirportID, AirportCode, etc. for a given geographic location with information about its city, state, etc. \n",
        "\n",
        "resultv = myclient['Weather']['WeatherLocations'].aggregate([\n",
        "    {\n",
        "        '$lookup': {\n",
        "            'from': 'Airports', \n",
        "            'localField': 'LocationID', \n",
        "            'foreignField': 'LocationID', \n",
        "            'as': 'airportlocation'}\n",
        "    }, {\n",
        "        '$project': {\n",
        "            '_id': 1, \n",
        "            'LocationID': 1, \n",
        "            'City': 1, \n",
        "            'State': 1, \n",
        "            'ZipCode': 1, \n",
        "            'airportlocation': 1\n",
        "        }\n",
        "    }, {\n",
        "        '$out': 'AirportLocation_view'\n",
        "    }\n",
        "])"
      ],
      "metadata": {
        "id": "4Or4LFoR6VVo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#View 2\n",
        "#Creating a View of the WeatherLocations and DailyWeather collection by joining them on LocationID so users can see the geographic information such as city and state of a given daily weather record\n",
        "#Create a new collection for the view named DWLocation_View\n",
        "#Use an aggregation pipeline in the first stage using lookup which joins WeatherLocations and DailyWeather using WeatherID\n",
        "#The project stage of the aggregation piepline determines which fields should be displayed in the view\n",
        "#All the fields are displayed to provide useful information for the user reagrding the precipitation, city, county, state, weathertype, severity, date, etc. \n",
        "#The last stage of the aggregation pipeline is the $out stage which creates the \"DWLocation_View\" and stores all the joined documents in that view in the database\n",
        "#Type of view: on-demand materialized view\n",
        "#This view is being created as a on-demand materialized views so that it is stored on MongoDB and can be used in queries \n",
        "#Why each view if needed in the context of your chosen application: In the context of this database, this view is needed to retrieve information about each daily weather records geographic location\n",
        "#By joining the collections on LocationID, it displays the City, County, State, ZipCode for each of the daily weather events recorded\n",
        "\n",
        "result2v = myclient['Weather']['DailyWeather'].aggregate([\n",
        "    {\n",
        "        '$lookup': {\n",
        "            'from': 'WeatherLocations', \n",
        "            'localField': 'LocationID', \n",
        "            'foreignField': 'LocationID', \n",
        "            'as': 'dailyweatherlocation'\n",
        "        }\n",
        "    }, {\n",
        "        '$project': {\n",
        "            'dailyweatherlocation': 1, \n",
        "            'Date': 1, \n",
        "            'WeatherID': 1, \n",
        "            'WeatherType': 1, \n",
        "            'Severity': 1, \n",
        "            'LocationID': 1, \n",
        "            'Precipitation': 1\n",
        "        }\n",
        "    }, {\n",
        "        '$out': 'DWLocation_View'\n",
        "    }])"
      ],
      "metadata": {
        "id": "esBsIpPn-H8o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Usage:\n",
        "\n",
        "Main operation (use cases):\n",
        "\n",
        "1. Retrieving general information from a collection\n",
        "2. Filtering objects by specific filters/conditions\n",
        "3. Aggregating/summarising data based on aggregation operators\n",
        "4. Joining entities/objects to address more complex queries\n",
        "5. Update or delete operations"
      ],
      "metadata": {
        "id": "PXlXd6C7oYde"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Retrieving general information from a collection"
      ],
      "metadata": {
        "id": "Y3CAUIDE0IJA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 1\n",
        "\n",
        "Textual description: Retrieve a document based on a given search critiera. In this case, retrieve the document from WeatherLocations in which the City is Mountain View\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol2, City: Mountain View \n",
        "\n",
        "Expected output: print the document for which the City is listed as Mountain View"
      ],
      "metadata": {
        "id": "LuaMpR_ssUHC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 1\n",
        "pprint.pprint(mycol2.find_one({\"City\" : \"Mountain View\"}))"
      ],
      "metadata": {
        "id": "IR2Q_ZhisWEB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ffdab33-c032-459e-9b02-50c4beed96f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'City': 'Mountain View',\n",
            " 'County': 'Santa Clara',\n",
            " 'LocationID': 6,\n",
            " 'State': 'CA',\n",
            " 'ZipCode': '95019',\n",
            " '_id': ObjectId('63c2cb4d6dcd39962050e3b6')}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 2\n",
        "\n",
        "Textual description: Query for a document using the objectID. In this case, use the _id from the first document inserted into the WeatherEvents collection\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol1, _id: x.inserted_id\n",
        "\n",
        "Expected output: print the first document from the WeatherEvents collection"
      ],
      "metadata": {
        "id": "vjrpiQBxuWBe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 2\n",
        "pprint.pprint(mycol1.find_one({\"_id\" : x.inserted_id}))"
      ],
      "metadata": {
        "id": "VSKrwoLrRkd5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e3dc038-7dc4-4b9d-f661-8c08b08ae283"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63c2caf86dcd39962050e38f')}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 3\n",
        "\n",
        "Textual description: Retrieve several documents from a collection. In this case, retrieve all the documents from the Airport collection\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol3\n",
        "\n",
        "Expected output: print all the documents in the Airports collection"
      ],
      "metadata": {
        "id": "lOn8UunUvn71"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 3\n",
        "for n in mycol3.find() :\n",
        "  pprint.pprint(n)"
      ],
      "metadata": {
        "id": "58YSR790fHid",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "896e03bd-7f99-4540-e78e-57ae4be51bb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'AirportCode': 'KCMY',\n",
            " 'AirportID': 1,\n",
            " 'LocationID': 20,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3c5')}\n",
            "{'AirportCode': 'KELP',\n",
            " 'AirportID': 2,\n",
            " 'LocationID': 17,\n",
            " 'TimeZone': 'US/Mountain',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3c6')}\n",
            "{'AirportCode': 'KGRF',\n",
            " 'AirportID': 3,\n",
            " 'LocationID': 19,\n",
            " 'TimeZone': 'US/Pacific',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3c7')}\n",
            "{'AirportCode': 'KHLR',\n",
            " 'AirportID': 4,\n",
            " 'LocationID': 18,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3c8')}\n",
            "{'AirportCode': 'KPIE',\n",
            " 'AirportID': 5,\n",
            " 'LocationID': 10,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3c9')}\n",
            "{'AirportCode': 'KNUQ',\n",
            " 'AirportID': 6,\n",
            " 'LocationID': 6,\n",
            " 'TimeZone': 'US/Pacific',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3ca')}\n",
            "{'AirportCode': 'KBLU',\n",
            " 'AirportID': 7,\n",
            " 'LocationID': 7,\n",
            " 'TimeZone': 'US/Pacific',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3cb')}\n",
            "{'AirportCode': 'KJES',\n",
            " 'AirportID': 8,\n",
            " 'LocationID': 11,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3cc')}\n",
            "{'AirportCode': 'KWVI',\n",
            " 'AirportID': 9,\n",
            " 'LocationID': 5,\n",
            " 'TimeZone': 'US/Pacific',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3cd')}\n",
            "{'AirportCode': 'KHVN',\n",
            " 'AirportID': 10,\n",
            " 'LocationID': 8,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3ce')}\n",
            "{'AirportCode': 'KWST',\n",
            " 'AirportID': 11,\n",
            " 'LocationID': 16,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3cf')}\n",
            "{'AirportCode': 'KOJ4',\n",
            " 'AirportID': 12,\n",
            " 'LocationID': 1,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d0')}\n",
            "{'AirportCode': 'KRSW',\n",
            " 'AirportID': 13,\n",
            " 'LocationID': 9,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d1')}\n",
            "{'AirportCode': 'KORH',\n",
            " 'AirportID': 14,\n",
            " 'LocationID': 14,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d2')}\n",
            "{'AirportCode': 'KALX',\n",
            " 'AirportID': 15,\n",
            " 'LocationID': 2,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d3')}\n",
            "{'AirportCode': 'KLZK',\n",
            " 'AirportID': 16,\n",
            " 'LocationID': 3,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d4')}\n",
            "{'AirportCode': 'KPWK',\n",
            " 'AirportID': 17,\n",
            " 'LocationID': 12,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d5')}\n",
            "{'AirportCode': 'KMIE',\n",
            " 'AirportID': 18,\n",
            " 'LocationID': 13,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d6')}\n",
            "{'AirportCode': 'KCMR',\n",
            " 'AirportID': 19,\n",
            " 'LocationID': 4,\n",
            " 'TimeZone': 'US/Mountain',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d7')}\n",
            "{'AirportCode': 'KMIV',\n",
            " 'AirportID': 20,\n",
            " 'LocationID': 15,\n",
            " 'TimeZone': 'US/Eastern',\n",
            " '_id': ObjectId('63c2cb526dcd39962050e3d8')}\n",
            "{'AirportCode': 'KMKE',\n",
            " 'AirportID': 21,\n",
            " 'LocationID': 5,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb646dcd39962050e3fd')}\n",
            "{'AirportCode': 'KAXS',\n",
            " 'AirportID': 22,\n",
            " 'LocationID': 9,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb646dcd39962050e3fe')}\n",
            "{'AirportCode': 'KAEL',\n",
            " 'AirportID': 23,\n",
            " 'LocationID': 11,\n",
            " 'TimeZone': 'US/Central',\n",
            " '_id': ObjectId('63c2cb646dcd39962050e3ff')}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 4\n",
        "\n",
        "Textual description: Count all the documents in a given collection. In this case, count all the documents in the DailyWeather collection\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol4\n",
        "\n",
        "Expected output: print the number of documents in the DailyWeather collection"
      ],
      "metadata": {
        "id": "epQJSZapv2CU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 4\n",
        "mycol4.count_documents({})"
      ],
      "metadata": {
        "id": "u1DTgqZIffZZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e72d6bee-4b7f-4ff0-cab0-1a1bb8e5692d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Filtering objects by specific filters/conditions"
      ],
      "metadata": {
        "id": "14ZV01vi0Oqg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 5\n",
        "\n",
        "Textual description: Retrieve all the DailyWeather documents recorded before 01/01/2017 and sort the results by WeatherType in ascending order\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: datetime.datetime(2017, 1, 1), mycol4, WeatherType\n",
        "\n",
        "Expected output: print out all the DailyWeather documents that occured before 01/01/2017, sorted by WeatherType"
      ],
      "metadata": {
        "id": "pKyOb4KkwNrt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 5\n",
        "d = datetime.datetime(2017, 1, 1)\n",
        "for n in mycol4.find({\"Date\" : {\"$lt\" : d}}).sort(\"WeatherType\", 1):\n",
        "  pprint.pprint(n)"
      ],
      "metadata": {
        "id": "JSO4uv_5fjRY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55a0206c-f8cf-4d1b-9a7f-1d52ac2d59fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'AirportID': 1,\n",
            " 'DailyWeather': 3,\n",
            " 'Date': datetime.datetime(2016, 12, 18, 0, 0),\n",
            " 'LocationID': 20,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3db')}\n",
            "{'AirportID': 14,\n",
            " 'DailyWeather': 17,\n",
            " 'Date': datetime.datetime(2016, 4, 2, 0, 0),\n",
            " 'LocationID': 14,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3e9')}\n",
            "{'AirportID': 12,\n",
            " 'DailyWeather': 9,\n",
            " 'Date': datetime.datetime(2016, 1, 9, 0, 0),\n",
            " 'LocationID': 1,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 3,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3e1')}\n",
            "{'AirportID': 9,\n",
            " 'DailyWeather': 20,\n",
            " 'Date': datetime.datetime(2016, 2, 13, 0, 0),\n",
            " 'LocationID': 5,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3ec')}\n",
            "{'AirportID': 18,\n",
            " 'DailyWeather': 21,\n",
            " 'Date': datetime.datetime(2016, 6, 3, 0, 0),\n",
            " 'LocationID': 11,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3ed')}\n",
            "{'AirportID': 5,\n",
            " 'DailyWeather': 26,\n",
            " 'Date': datetime.datetime(2016, 5, 13, 0, 0),\n",
            " 'LocationID': 10,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3f2')}\n",
            "{'AirportID': 3,\n",
            " 'DailyWeather': 4,\n",
            " 'Date': datetime.datetime(2016, 1, 5, 0, 0),\n",
            " 'LocationID': 19,\n",
            " 'Precipitation': 0.01,\n",
            " 'Severity': 'Light',\n",
            " 'WeatherID': 4,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3dc')}\n",
            "{'AirportID': 12,\n",
            " 'DailyWeather': 10,\n",
            " 'Date': datetime.datetime(2016, 1, 22, 0, 0),\n",
            " 'LocationID': 1,\n",
            " 'Precipitation': 0.29,\n",
            " 'Severity': 'Heavy',\n",
            " 'WeatherID': 6,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3e2')}\n",
            "{'AirportID': 13,\n",
            " 'DailyWeather': 16,\n",
            " 'Date': datetime.datetime(2016, 1, 10, 0, 0),\n",
            " 'LocationID': 9,\n",
            " 'Precipitation': 0.2,\n",
            " 'Severity': 'Light',\n",
            " 'WeatherID': 4,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3e8')}\n",
            "{'AirportID': 6,\n",
            " 'DailyWeather': 27,\n",
            " 'Date': datetime.datetime(2016, 1, 16, 0, 0),\n",
            " 'LocationID': 6,\n",
            " 'Precipitation': 0.1,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 5,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3f3')}\n",
            "{'AirportID': 5,\n",
            " 'DailyWeather': 29,\n",
            " 'Date': datetime.datetime(2016, 1, 27, 0, 0),\n",
            " 'LocationID': 10,\n",
            " 'Precipitation': 0.29,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 5,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3f5')}\n",
            "{'AirportID': 6,\n",
            " 'DailyWeather': 30,\n",
            " 'Date': datetime.datetime(2016, 1, 19, 0, 0),\n",
            " 'LocationID': 6,\n",
            " 'Precipitation': 0.19,\n",
            " 'Severity': 'Light',\n",
            " 'WeatherID': 4,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3f6')}\n",
            "{'AirportID': 11,\n",
            " 'DailyWeather': 15,\n",
            " 'Date': datetime.datetime(2016, 2, 5, 0, 0),\n",
            " 'LocationID': 16,\n",
            " 'Precipitation': 0.1,\n",
            " 'Severity': 'Heavy',\n",
            " 'WeatherID': 9,\n",
            " 'WeatherType': 'Snow',\n",
            " '_id': ObjectId('63c2cb576dcd39962050e3e7')}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 6\n",
        "\n",
        "Textual description: Retrieve all the documents from WeatherLocations for which the City name starts with the letter M\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol2, City: \"^M\"\n",
        "\n",
        "Expected output: print out all the documents from WeatherLocations which have a City name starting with \"M\""
      ],
      "metadata": {
        "id": "5yZ6r2V5y8cv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query6 \n",
        "myquery = { \"City\" : { \"$regex\" : \"^M\"} }\n",
        "mydoc = mycol2.find(myquery)\n",
        "\n",
        "for x in mydoc:\n",
        "  print(x)"
      ],
      "metadata": {
        "id": "LmK9J8cq7o4E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d92a895-fe1e-49a5-e0e2-df37140b56b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b6'), 'LocationID': 6, 'City': 'Mountain View', 'County': 'Santa Clara', 'State': 'CA', 'ZipCode': '95019'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bd'), 'LocationID': 13, 'City': 'Muncie', 'County': 'Delaware', 'State': 'IN', 'ZipCode': '047303'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bf'), 'LocationID': 15, 'City': 'Millville', 'County': 'Cumberland', 'State': 'NJ', 'ZipCode': '08332'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3f7'), 'LocationID': 21, 'City': 'Milwaukee', 'County': 'Milwaukee', 'State': 'WI', 'ZipCode': '53207'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Aggregating/summarising data based on aggregation operators"
      ],
      "metadata": {
        "id": "HyqgSw4v0Eoc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 7\n",
        "\n",
        "Textual description: Filter for documents in DailyWeather by Rain. Group the documents by Severity and calculate the total amount of Precipitation for each level of severity\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: mycol4, WeatherType: Rain, Severity, Precipitation\n",
        "\n",
        "Expected output: Print the total amount of precipitation for each type of Rain severity \n",
        "\n",
        "The $match stage\n",
        "\n",
        "*   Filters the documents to those with Rain\n",
        "*   Outputs the filtered documents to the $group stage \n",
        "\n",
        "The $group stage \n",
        "\n",
        "*   Groups the input documents by Severity\n",
        "*   Use $sum to calculate the total amount of Precipitation for each level of Severity, which is stored in the sumPrecipitation field returned by the aggregation pipeline "
      ],
      "metadata": {
        "id": "r7NUDkbM0W7j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 7\n",
        "\n",
        "result = mycol4.aggregate([\n",
        "    { \"$match\" : { \"WeatherType\" : \"Rain\"} },\n",
        "    { \"$group\" : {\"_id\" : \"$Severity\", \"sumPrecipitation\" : {\"$sum\" : \"$Precipitation\" } } }\n",
        "])\n",
        "\n",
        "for x in result:\n",
        "  pprint.pprint(x)\n"
      ],
      "metadata": {
        "id": "UkyTVp6n_IuF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef475e5a-28e5-4170-b38b-0127ef91ae49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'_id': 'Moderate', 'sumPrecipitation': 0.58}\n",
            "{'_id': 'Light', 'sumPrecipitation': 0.65}\n",
            "{'_id': 'Heavy', 'sumPrecipitation': 0.29}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Joining entities/objects to address more complex queries\n",
        "\n",
        "Query 8 \n",
        "\n",
        "Textual Description: Joining the WeatherEvents collection with the fs.files collection on the WeatherID field using the $lookup aggregation method\n",
        "\n",
        "Input Parameters and conditions for filtering/matching data: mycol1, fs.files, WeatherID\n",
        "\n",
        "Expected Output: Print all the WeatherEvents with their respective images from files.fs"
      ],
      "metadata": {
        "id": "3q2isp9UNBHE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 8 \n",
        "query8 = mycol1.aggregate([{\n",
        "    '$lookup' : {\n",
        "        'from' : \"fs.files\",\n",
        "        'localField' : \"WeatherID\",\n",
        "        'foreignField' : \"WeatherID\",\n",
        "        'as' : \"mycol1\"\n",
        "    }\n",
        "}])\n",
        "\n",
        "for x in query8:\n",
        "  pprint.pprint(x)\n",
        "\n",
        "#note: WeatherID: 11 from WeatherEvents (the last document printed) will not have a fs.file associated with it since it is a document that was inserted by Trigger 2 \n",
        "#after WeatherEvents and fs.files was originally created\n",
        "#another trigger is needed to insert a fs.file for WeatherID: 11 which will then allow this query to also print its fs.file"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "49lVO_25BQSR",
        "outputId": "487e0b7e-3542-42e4-bfb2-da7305e02845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63c2caf86dcd39962050e38f'),\n",
            " 'mycol1': [{'WeatherID': 1,\n",
            "             '_id': ObjectId('63c2cbf76dcd39962050e401'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'severecold',\n",
            "             'length': 109593,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 24, 704000)}]}\n",
            "{'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e390'),\n",
            " 'mycol1': [{'WeatherID': 2,\n",
            "             '_id': ObjectId('63c2cbf96dcd39962050e403'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'fogmoderate',\n",
            "             'length': 3022,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 25, 979000)}]}\n",
            "{'Severity': 'Severe',\n",
            " 'WeatherID': 3,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e391'),\n",
            " 'mycol1': [{'WeatherID': 3,\n",
            "             '_id': ObjectId('63c2cbfb6dcd39962050e405'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'fogsevere',\n",
            "             'length': 1562,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 28, 51000)}]}\n",
            "{'Severity': 'Light',\n",
            " 'WeatherID': 4,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e392'),\n",
            " 'mycol1': [{'WeatherID': 4,\n",
            "             '_id': ObjectId('63c2cbfd6dcd39962050e407'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'rainlight',\n",
            "             'length': 8206,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 29, 410000)}]}\n",
            "{'Severity': 'Moderate',\n",
            " 'WeatherID': 5,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e393'),\n",
            " 'mycol1': [{'WeatherID': 5,\n",
            "             '_id': ObjectId('63c2cbfe6dcd39962050e409'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'rainmoderate',\n",
            "             'length': 6298,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 30, 760000)}]}\n",
            "{'Severity': 'Heavy',\n",
            " 'WeatherID': 6,\n",
            " 'WeatherType': 'Rain',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e394'),\n",
            " 'mycol1': [{'WeatherID': 6,\n",
            "             '_id': ObjectId('63c2cc006dcd39962050e40b'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'rainheavy',\n",
            "             'length': 8681,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 32, 392000)}]}\n",
            "{'Severity': 'Light',\n",
            " 'WeatherID': 7,\n",
            " 'WeatherType': 'Snow',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e395'),\n",
            " 'mycol1': [{'WeatherID': 7,\n",
            "             '_id': ObjectId('63c2cc016dcd39962050e40d'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'snowlight',\n",
            "             'length': 156121,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 33, 990000)}]}\n",
            "{'Severity': 'Moderate',\n",
            " 'WeatherID': 8,\n",
            " 'WeatherType': 'Snow',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e396'),\n",
            " 'mycol1': [{'WeatherID': 8,\n",
            "             '_id': ObjectId('63c2cc026dcd39962050e40f'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'snowmoderate',\n",
            "             'length': 22791,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 35, 434000)}]}\n",
            "{'Severity': 'Heavy',\n",
            " 'WeatherID': 9,\n",
            " 'WeatherType': 'Snow',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e397'),\n",
            " 'mycol1': [{'WeatherID': 9,\n",
            "             '_id': ObjectId('63c2cc046dcd39962050e411'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'snowheavy',\n",
            "             'length': 633335,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 37, 438000)}]}\n",
            "{'Severity': 'Severe',\n",
            " 'WeatherID': 10,\n",
            " 'WeatherType': 'Storm',\n",
            " '_id': ObjectId('63c2cafb6dcd39962050e398'),\n",
            " 'mycol1': [{'WeatherID': 10,\n",
            "             '_id': ObjectId('63c2cc066dcd39962050e415'),\n",
            "             'chunkSize': 261120,\n",
            "             'filename': 'stormsevere',\n",
            "             'length': 120983,\n",
            "             'uploadDate': datetime.datetime(2023, 1, 14, 15, 36, 38, 796000)}]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 9 \n",
        "\n",
        "Textual Description: Filter for DailyWeather documents which have a Precipitation of 0\n",
        "\n",
        "Input Parameters and conditions for filtering/matching data: mycol4, Precipitation = 0\n",
        "\n",
        "Expected Output: Print all the DailyWeather documents that have a Precipitation of 0"
      ],
      "metadata": {
        "id": "QB7bKjzHHbLL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 9 \n",
        "#can filter for different levels of precipitation by changing the value of vector p\n",
        "p = 0\n",
        "for n in mycol4.find({\"Precipitation\" : p}):\n",
        "  pprint.pprint(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r81ew7UCFiwL",
        "outputId": "bbe09ad4-fd82-4884-e6c6-032451c2cfcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'AirportID': 1,\n",
            " 'DailyWeather': 3,\n",
            " 'Date': datetime.datetime(2016, 12, 18, 0, 0),\n",
            " 'LocationID': 20,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94d8')}\n",
            "{'AirportID': 1,\n",
            " 'DailyWeather': 6,\n",
            " 'Date': datetime.datetime(2021, 12, 16, 0, 0),\n",
            " 'LocationID': 20,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 10,\n",
            " 'WeatherType': 'Storm',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94db')}\n",
            "{'AirportID': 7,\n",
            " 'DailyWeather': 7,\n",
            " 'Date': datetime.datetime(2017, 4, 7, 0, 0),\n",
            " 'LocationID': 7,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 10,\n",
            " 'WeatherType': 'Storm',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94dc')}\n",
            "{'AirportID': 3,\n",
            " 'DailyWeather': 8,\n",
            " 'Date': datetime.datetime(2021, 8, 10, 0, 0),\n",
            " 'LocationID': 19,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 10,\n",
            " 'WeatherType': 'Storm',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94dd')}\n",
            "{'AirportID': 12,\n",
            " 'DailyWeather': 9,\n",
            " 'Date': datetime.datetime(2016, 1, 9, 0, 0),\n",
            " 'LocationID': 1,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 3,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94de')}\n",
            "{'AirportID': 4,\n",
            " 'DailyWeather': 11,\n",
            " 'Date': datetime.datetime(2019, 7, 21, 0, 0),\n",
            " 'LocationID': 18,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e0')}\n",
            "{'AirportID': 4,\n",
            " 'DailyWeather': 13,\n",
            " 'Date': datetime.datetime(2018, 9, 28, 0, 0),\n",
            " 'LocationID': 18,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 3,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e2')}\n",
            "{'AirportID': 16,\n",
            " 'DailyWeather': 14,\n",
            " 'Date': datetime.datetime(2019, 10, 17, 0, 0),\n",
            " 'LocationID': 3,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e3')}\n",
            "{'AirportID': 14,\n",
            " 'DailyWeather': 17,\n",
            " 'Date': datetime.datetime(2016, 4, 2, 0, 0),\n",
            " 'LocationID': 14,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e6')}\n",
            "{'AirportID': 7,\n",
            " 'DailyWeather': 19,\n",
            " 'Date': datetime.datetime(2019, 2, 14, 0, 0),\n",
            " 'LocationID': 7,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 9,\n",
            " 'WeatherType': 'Storm',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e8')}\n",
            "{'AirportID': 9,\n",
            " 'DailyWeather': 20,\n",
            " 'Date': datetime.datetime(2016, 2, 13, 0, 0),\n",
            " 'LocationID': 5,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94e9')}\n",
            "{'AirportID': 18,\n",
            " 'DailyWeather': 21,\n",
            " 'Date': datetime.datetime(2016, 6, 3, 0, 0),\n",
            " 'LocationID': 11,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94ea')}\n",
            "{'AirportID': 10,\n",
            " 'DailyWeather': 22,\n",
            " 'Date': datetime.datetime(2020, 6, 5, 0, 0),\n",
            " 'LocationID': 8,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94eb')}\n",
            "{'AirportID': 2,\n",
            " 'DailyWeather': 23,\n",
            " 'Date': datetime.datetime(2017, 9, 24, 0, 0),\n",
            " 'LocationID': 17,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94ec')}\n",
            "{'AirportID': 9,\n",
            " 'DailyWeather': 24,\n",
            " 'Date': datetime.datetime(2018, 8, 13, 0, 0),\n",
            " 'LocationID': 5,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 3,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94ed')}\n",
            "{'AirportID': 20,\n",
            " 'DailyWeather': 25,\n",
            " 'Date': datetime.datetime(2018, 1, 3, 0, 0),\n",
            " 'LocationID': 15,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Severe',\n",
            " 'WeatherID': 1,\n",
            " 'WeatherType': 'Cold',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94ee')}\n",
            "{'AirportID': 5,\n",
            " 'DailyWeather': 26,\n",
            " 'Date': datetime.datetime(2016, 5, 13, 0, 0),\n",
            " 'LocationID': 10,\n",
            " 'Precipitation': 0,\n",
            " 'Severity': 'Moderate',\n",
            " 'WeatherID': 2,\n",
            " 'WeatherType': 'Fog',\n",
            " '_id': ObjectId('63bbb8ef4e79f8db807e94ef')}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Update or delete operations"
      ],
      "metadata": {
        "id": "5Ws6yQx_NCGW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 10\n",
        "\n",
        "Textual description: Update the ZipCode for a document in WeatherLocations\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: ZipCode: 33762, mycol2\n",
        "\n",
        "Expected output: Print the WeatherLocations collection with the updated ZipCode value in the document"
      ],
      "metadata": {
        "id": "ZRk_SQWUNNvD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 10\n",
        "#Simulates an UPDATE Trigger \n",
        "#Extract the relevent data that needs to be updated, this ensures that the field exists and is not NULL before applying any update functions to it\n",
        "\n",
        "#filter condition \n",
        "myquery = { \"ZipCode\" : \"33762\"}\n",
        "#update rule \n",
        "newvalues = { \"$set\" : { \"ZipCode\" : \"37652\"}}\n",
        "\n",
        "#use update_one to update the ZipCode in the document\n",
        "#this works as the update trigger, exeucting the required changes to the metadata \n",
        "mycol2.update_one(myquery, newvalues)\n",
        "\n",
        "#print WeatherLocations after the update:\n",
        "for x in mycol2.find():\n",
        "    print(x)"
      ],
      "metadata": {
        "id": "pXn_8onr9RcK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7941a51a-9cc9-4d5c-94a1-e9d75e346d1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b1'), 'LocationID': 1, 'City': 'Florala', 'County': 'Covington', 'State': 'AL', 'ZipCode': '36442'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b2'), 'LocationID': 2, 'City': 'Alexander City', 'County': 'Tallapoosa', 'State': 'AL', 'ZipCode': '35010'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b3'), 'LocationID': 3, 'City': 'North Little Rock', 'County': 'Pulaski', 'State': 'AR', 'ZipCode': '72118'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b4'), 'LocationID': 4, 'City': 'Williams', 'County': 'Coconino', 'State': 'AR', 'ZipCode': '86046'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b5'), 'LocationID': 5, 'City': 'Freedom', 'County': 'Santa Cruz', 'State': 'AZ', 'ZipCode': '86046'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b6'), 'LocationID': 6, 'City': 'Mountain View', 'County': 'Santa Clara', 'State': 'CA', 'ZipCode': '95019'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b7'), 'LocationID': 7, 'City': 'Alta', 'County': 'Placer', 'State': 'CA', 'ZipCode': '94035'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b8'), 'LocationID': 8, 'City': 'East Haven', 'County': 'New Haven', 'State': 'CT', 'ZipCode': '06512'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3b9'), 'LocationID': 9, 'City': 'Fort Myers', 'County': 'Lee', 'State': 'FL', 'ZipCode': '33913'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3ba'), 'LocationID': 10, 'City': 'Clearwater', 'County': 'Pinellas', 'State': 'FL', 'ZipCode': '37652'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bb'), 'LocationID': 11, 'City': 'Jesup', 'County': 'Wayne', 'State': 'GA', 'ZipCode': '31546'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bc'), 'LocationID': 12, 'City': 'Wheeling', 'County': 'Cook', 'State': 'IL', 'ZipCode': '60090'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bd'), 'LocationID': 13, 'City': 'Muncie', 'County': 'Delaware', 'State': 'IN', 'ZipCode': '047303'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3be'), 'LocationID': 14, 'City': 'Worcester', 'County': 'Worcester', 'State': 'MA', 'ZipCode': '01602'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3bf'), 'LocationID': 15, 'City': 'Millville', 'County': 'Cumberland', 'State': 'NJ', 'ZipCode': '08332'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3c0'), 'LocationID': 16, 'City': 'Westerly', 'County': 'Washington', 'State': 'R1', 'ZipCode': '02891'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3c1'), 'LocationID': 17, 'City': 'El Paso', 'County': 'El Paso', 'State': 'TX', 'ZipCode': '79925'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3c2'), 'LocationID': 18, 'City': 'Fort Hood', 'County': 'Bell', 'State': 'TX', 'ZipCode': '76544'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3c3'), 'LocationID': 19, 'City': 'Tacoma', 'County': 'Pierce', 'State': 'WA', 'ZipCode': '98433'}\n",
            "{'_id': ObjectId('63c2cb4d6dcd39962050e3c4'), 'LocationID': 20, 'City': 'Sparta', 'County': 'Monroe', 'State': 'WI', 'ZipCode': '54656'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3f7'), 'LocationID': 21, 'City': 'Milwaukee', 'County': 'Milwaukee', 'State': 'WI', 'ZipCode': '53207'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3f8'), 'LocationID': 22, 'City': 'Atlus', 'County': 'Jackson', 'State': 'OK', 'ZipCode': '73521'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3f9'), 'LocationID': 23, 'City': 'Albert Lea', 'County': 'Freeborn', 'State': 'MN', 'ZipCode': '56007'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3fa'), 'LocationID': 24, 'City': 'Batan Rouge', 'County': 'East Batan Rouge', 'State': 'LA', 'ZipCode': '70807'}\n",
            "{'_id': ObjectId('63c2cb5e6dcd39962050e3fb'), 'LocationID': 25, 'City': 'Grant Rapids', 'County': 'Kent', 'State': 'MI', 'ZipCode': '49512'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Query 11\n",
        "\n",
        "Textual description: Delete the documents in DailyWeather which have a WeatherType of Storm\n",
        "\n",
        "Input parameters and conditions for filtering/matching data: WeatherType: Storm\n",
        "\n",
        "Expected output: Print the DailyWeather collection after deleting the documents with a WeatherType of Storm and count the number of documents left in DailyWeather"
      ],
      "metadata": {
        "id": "m7YHPJhfN_YP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#query 11\n",
        "#Simulates the DELETE Trigger \n",
        "#Extract the relevent data that needs to be deleted, this ensures that the field exists and is not NULL before applying any delete functions to it\n",
        "\n",
        "#filter condition \n",
        "myquery = { \"WeatherType\" : \"Storm\"}\n",
        "\n",
        "#use delete_many to delete the Storm documents from DailyWeather\n",
        "#delete rule: use delete_many to delete the Storm documents from DailyWeather\n",
        "#this works as the delete trigger, exeucting the required deletions to the metadata \n",
        "mycol4.delete_many(myquery)\n",
        "\n",
        "#print DailyWeather after the deletions:\n",
        "for x in mycol4.find():\n",
        "    print(x)"
      ],
      "metadata": {
        "id": "89wepY8GOT52",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4453a3df-81f3-4255-a605-d946b055b733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'_id': ObjectId('63c2cb576dcd39962050e3d9'), 'DailyWeather': 1, 'Date': datetime.datetime(2017, 9, 26, 0, 0), 'WeatherID': 5, 'WeatherType': 'Rain', 'Severity': 'Moderate', 'LocationID': 20, 'AirportID': 1, 'Precipitation': 0.19}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3da'), 'DailyWeather': 2, 'Date': datetime.datetime(2021, 1, 31, 0, 0), 'WeatherID': 9, 'WeatherType': 'Snow', 'Severity': 'Heavy', 'LocationID': 13, 'AirportID': 18, 'Precipitation': 0.07}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3db'), 'DailyWeather': 3, 'Date': datetime.datetime(2016, 12, 18, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 20, 'AirportID': 1, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3dc'), 'DailyWeather': 4, 'Date': datetime.datetime(2016, 1, 5, 0, 0), 'WeatherID': 4, 'WeatherType': 'Rain', 'Severity': 'Light', 'LocationID': 19, 'AirportID': 3, 'Precipitation': 0.01}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3dd'), 'DailyWeather': 5, 'Date': datetime.datetime(2017, 2, 17, 0, 0), 'WeatherID': 4, 'WeatherType': 'Rain', 'Severity': 'Light', 'LocationID': 6, 'AirportID': 6, 'Precipitation': 0.05}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e1'), 'DailyWeather': 9, 'Date': datetime.datetime(2016, 1, 9, 0, 0), 'WeatherID': 3, 'WeatherType': 'Fog', 'Severity': 'Severe', 'LocationID': 1, 'AirportID': 12, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e2'), 'DailyWeather': 10, 'Date': datetime.datetime(2016, 1, 22, 0, 0), 'WeatherID': 6, 'WeatherType': 'Rain', 'Severity': 'Heavy', 'LocationID': 1, 'AirportID': 12, 'Precipitation': 0.29}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e3'), 'DailyWeather': 11, 'Date': datetime.datetime(2019, 7, 21, 0, 0), 'WeatherID': 2, 'WeatherType': 'Fog', 'Severity': 'Moderate', 'LocationID': 18, 'AirportID': 4, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e4'), 'DailyWeather': 12, 'Date': datetime.datetime(2017, 2, 27, 0, 0), 'WeatherID': 4, 'WeatherType': 'Rain', 'Severity': 'Light', 'LocationID': 2, 'AirportID': 15, 'Precipitation': 0.2}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e5'), 'DailyWeather': 13, 'Date': datetime.datetime(2018, 9, 28, 0, 0), 'WeatherID': 3, 'WeatherType': 'Fog', 'Severity': 'Severe', 'LocationID': 18, 'AirportID': 4, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e6'), 'DailyWeather': 14, 'Date': datetime.datetime(2019, 10, 17, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 3, 'AirportID': 16, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e7'), 'DailyWeather': 15, 'Date': datetime.datetime(2016, 2, 5, 0, 0), 'WeatherID': 9, 'WeatherType': 'Snow', 'Severity': 'Heavy', 'LocationID': 16, 'AirportID': 11, 'Precipitation': 0.1}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e8'), 'DailyWeather': 16, 'Date': datetime.datetime(2016, 1, 10, 0, 0), 'WeatherID': 4, 'WeatherType': 'Rain', 'Severity': 'Light', 'LocationID': 9, 'AirportID': 13, 'Precipitation': 0.2}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3e9'), 'DailyWeather': 17, 'Date': datetime.datetime(2016, 4, 2, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 14, 'AirportID': 14, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3ea'), 'DailyWeather': 18, 'Date': datetime.datetime(2021, 1, 24, 0, 0), 'WeatherID': 7, 'WeatherType': 'Snow', 'Severity': 'Light', 'LocationID': 4, 'AirportID': 19, 'Precipitation': 0.03}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3ec'), 'DailyWeather': 20, 'Date': datetime.datetime(2016, 2, 13, 0, 0), 'WeatherID': 2, 'WeatherType': 'Fog', 'Severity': 'Moderate', 'LocationID': 5, 'AirportID': 9, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3ed'), 'DailyWeather': 21, 'Date': datetime.datetime(2016, 6, 3, 0, 0), 'WeatherID': 2, 'WeatherType': 'Fog', 'Severity': 'Moderate', 'LocationID': 11, 'AirportID': 18, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3ee'), 'DailyWeather': 22, 'Date': datetime.datetime(2020, 6, 5, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 8, 'AirportID': 10, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3ef'), 'DailyWeather': 23, 'Date': datetime.datetime(2017, 9, 24, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 17, 'AirportID': 2, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f0'), 'DailyWeather': 24, 'Date': datetime.datetime(2018, 8, 13, 0, 0), 'WeatherID': 3, 'WeatherType': 'Fog', 'Severity': 'Severe', 'LocationID': 5, 'AirportID': 9, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f1'), 'DailyWeather': 25, 'Date': datetime.datetime(2018, 1, 3, 0, 0), 'WeatherID': 1, 'WeatherType': 'Cold', 'Severity': 'Severe', 'LocationID': 15, 'AirportID': 20, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f2'), 'DailyWeather': 26, 'Date': datetime.datetime(2016, 5, 13, 0, 0), 'WeatherID': 2, 'WeatherType': 'Fog', 'Severity': 'Moderate', 'LocationID': 10, 'AirportID': 5, 'Precipitation': 0}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f3'), 'DailyWeather': 27, 'Date': datetime.datetime(2016, 1, 16, 0, 0), 'WeatherID': 5, 'WeatherType': 'Rain', 'Severity': 'Moderate', 'LocationID': 6, 'AirportID': 6, 'Precipitation': 0.1}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f4'), 'DailyWeather': 28, 'Date': datetime.datetime(2019, 4, 14, 0, 0), 'WeatherID': 8, 'WeatherType': 'Snow', 'Severity': 'Moderate', 'LocationID': 12, 'AirportID': 17, 'Precipitation': 0.06}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f5'), 'DailyWeather': 29, 'Date': datetime.datetime(2016, 1, 27, 0, 0), 'WeatherID': 5, 'WeatherType': 'Rain', 'Severity': 'Moderate', 'LocationID': 10, 'AirportID': 5, 'Precipitation': 0.29}\n",
            "{'_id': ObjectId('63c2cb576dcd39962050e3f6'), 'DailyWeather': 30, 'Date': datetime.datetime(2016, 1, 19, 0, 0), 'WeatherID': 4, 'WeatherType': 'Rain', 'Severity': 'Light', 'LocationID': 6, 'AirportID': 6, 'Precipitation': 0.19}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#check how many documents were deleted\n",
        "#Since it prints 26 documents, this implies that 4 were deleted from a total of 30 in the collection\n",
        "mycol4.count_documents({})"
      ],
      "metadata": {
        "id": "g10C9-p1PA2n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "53940dc0-cf68-425c-f7b2-bb662af9fe99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "26"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#close connection\n",
        "client = pymongo.MongoClient()\n",
        "client.close()"
      ],
      "metadata": {
        "id": "y4hh48wE_tms"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}